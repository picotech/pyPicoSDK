"""
Copyright (C) 2025-2025 Pico Technology Ltd. See LICENSE file for terms.

Description:
This example completes a simple block capture and saves the data from channel A to disk.
The file type is a binary file generated by the numpy package making it more efficient
than a CSV file or text based file.

These files are *not* human readable, meaning they will need to be re-read by Python or
another package that can read numpy binary files.

Requirements:
- PicoScope 6000E/3000E
- Python packages:
  (pip install) pypicosdk numpy

Setup:
  - Connect Channel A to the AWG output
"""

import numpy as np
import pypicosdk as psdk

SAMPLES = 5_000

# This example uses the same setup as 'simple_block_capture.py', setup comments are skipped.
scope = psdk.psospa()
scope.open_unit()
scope.set_siggen(frequency=50_000, pk2pk=1.8, wave_type=psdk.WAVEFORM.SINE)
scope.set_channel(channel=psdk.CHANNEL.A, range=psdk.RANGE.V1)
scope.set_simple_trigger(channel=psdk.CHANNEL.A, threshold=0, auto_trigger=0)
TIMEBASE = scope.sample_rate_to_timebase(sample_rate=50, unit=psdk.SAMPLE_RATE.MSPS)

# Get data to save as channel buffer and time axis
channel_buffer, time_axis = scope.run_simple_block_capture(TIMEBASE, SAMPLES)

# Close the unit as it's no longer needed
scope.close_unit()

# If you'd like to plot the data before saving, do it here

# Optional: extract channel A from channel_buffer
a_buffer = channel_buffer[psdk.CHANNEL.A]

# Use np.save to save each array seperately
np.save('a_buffer.npy', a_buffer)
np.save('time_axis.npy', time_axis)

# Or combine the arrays to save as a single file (will need to be index when loaded)
a_buffer_time = np.stack([time_axis, a_buffer])
np.save('a_buffer_time.npy', a_buffer_time)
