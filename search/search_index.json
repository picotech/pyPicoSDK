{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to pyPicoSDK Documentation Installation Prerequisites Go to PicoTech downloads picotech.com/downloads Find your PicoScope in the list and click through Download and install PicoSDK for your operating system Via Pip Install the package via pip pip install pypicosdk In your main.py add import pypicosdk or import pypicosdk as psdk Via GitHub (Inc examples) Install github repository to folder git clone https://github.com/picotech/pyPicoSDK.git In the root directory (where setup.py is) run pip install . In your main.py add import pypicosdk or import pypicosdk as psdk Python requirements When installing pyPicoSDK, the following dependency is automatically installed: - numpy To run the provided examples, the following additional Python packages are required: - matplotlib - scipy - numpy (installed automatically with pyPicoSDK) To install the example depedancies use one of the following commands: pip install matplotlib scipy numpy or pip install -r requirements.txt Quickstart To test functionality of this library, copy and run the following python script: import pypicosdk as psdk scope = psdk.ps6000a() scope.open_unit() print(scope.get_unit_serial()) scope.close_unit() The output should be similar to: JR001/001 Once tested, try an example script from github to get started. Full getting started For our full getting started guide, click here to go to our full knowledge base article. Issues For details on raising an issue, find information here: Issue documentation Compatibility Current PicoScope support: - PicoScope 6000E (ps6000a drivers) - PicoScope 3000E (psospa drivers) Useful links and references Documentation & Reference GitHub Repo (with examples) pypi (src repo) pypi-nightly (dev repo) Version Control pyPicoSDK: 1.6.2 Docs: 0.4.1","title":"Home"},{"location":"#welcome-to-pypicosdk-documentation","text":"","title":"Welcome to pyPicoSDK Documentation"},{"location":"#installation","text":"","title":"Installation"},{"location":"#prerequisites","text":"Go to PicoTech downloads picotech.com/downloads Find your PicoScope in the list and click through Download and install PicoSDK for your operating system","title":"Prerequisites"},{"location":"#via-pip","text":"Install the package via pip pip install pypicosdk In your main.py add import pypicosdk or import pypicosdk as psdk","title":"Via Pip"},{"location":"#via-github-inc-examples","text":"Install github repository to folder git clone https://github.com/picotech/pyPicoSDK.git In the root directory (where setup.py is) run pip install . In your main.py add import pypicosdk or import pypicosdk as psdk","title":"Via GitHub (Inc examples)"},{"location":"#python-requirements","text":"When installing pyPicoSDK, the following dependency is automatically installed: - numpy To run the provided examples, the following additional Python packages are required: - matplotlib - scipy - numpy (installed automatically with pyPicoSDK) To install the example depedancies use one of the following commands: pip install matplotlib scipy numpy or pip install -r requirements.txt","title":"Python requirements"},{"location":"#quickstart","text":"To test functionality of this library, copy and run the following python script: import pypicosdk as psdk scope = psdk.ps6000a() scope.open_unit() print(scope.get_unit_serial()) scope.close_unit() The output should be similar to: JR001/001 Once tested, try an example script from github to get started.","title":"Quickstart"},{"location":"#full-getting-started","text":"For our full getting started guide, click here to go to our full knowledge base article.","title":"Full getting started"},{"location":"#issues","text":"For details on raising an issue, find information here: Issue documentation","title":"Issues"},{"location":"#compatibility","text":"Current PicoScope support: - PicoScope 6000E (ps6000a drivers) - PicoScope 3000E (psospa drivers)","title":"Compatibility"},{"location":"#useful-links-and-references","text":"Documentation & Reference GitHub Repo (with examples) pypi (src repo) pypi-nightly (dev repo)","title":"Useful links and references"},{"location":"#version-control","text":"pyPicoSDK: 1.6.2 Docs: 0.4.1","title":"Version Control"},{"location":"dev/changelog/","text":"Changelog You can find a list of all changes in github tags in the link below: GitHub Releases","title":"Changelog"},{"location":"dev/changelog/#changelog","text":"You can find a list of all changes in github tags in the link below: GitHub Releases","title":"Changelog"},{"location":"dev/current/","text":"Functions available pyPicoSDK v0.1 6000 (A) API (PicoScope 6000E Series) Simple/Advanced Block Mode Simple/Advanced Rapid Block Mode Signal Generator All other direct driver functions PSOSPA API (PicoScope 3000E Series) Simple/Advanced Block Mode Simple/Advanced Rapid Block Mode Signal Generator All other direct driver functions","title":"Current Support"},{"location":"dev/current/#functions-available-pypicosdk-v01","text":"","title":"Functions available pyPicoSDK v0.1"},{"location":"dev/current/#6000-a-api-picoscope-6000e-series","text":"Simple/Advanced Block Mode Simple/Advanced Rapid Block Mode Signal Generator All other direct driver functions","title":"6000 (A) API (PicoScope 6000E Series)"},{"location":"dev/current/#psospa-api-picoscope-3000e-series","text":"Simple/Advanced Block Mode Simple/Advanced Rapid Block Mode Signal Generator All other direct driver functions","title":"PSOSPA API (PicoScope 3000E Series)"},{"location":"dev/issues/","text":"Issues Issues with pyPicoSDK can be placed directly with Pico Technology's tech support team. To log an issue email support at: Email support: support@picotech.com . Contact us via our website: picotech.com/tech-support/technical-enquiries Make sure to leave the following information: Issue Summary : \"Describe the issue in detail.\" Environment Details Operating system: \"i.e. Windows/macOS/Linux(Ubuntu/Mint)\" PicoScope model: \"i.e. PicoScope 3814E/PicoScope 6824E\" Python version: \"Can be found using python -V \" pyPicoSDK version: \"Can be found using pip list or pip freeze \" PicoSDK version: \"Can be found in SDK docs location per PicoScope\" Steps to reproduce issue: \"Detail the steps to arrive at the same.\"","title":"Issues"},{"location":"dev/issues/#issues","text":"Issues with pyPicoSDK can be placed directly with Pico Technology's tech support team. To log an issue email support at: Email support: support@picotech.com . Contact us via our website: picotech.com/tech-support/technical-enquiries Make sure to leave the following information: Issue Summary : \"Describe the issue in detail.\" Environment Details Operating system: \"i.e. Windows/macOS/Linux(Ubuntu/Mint)\" PicoScope model: \"i.e. PicoScope 3814E/PicoScope 6824E\" Python version: \"Can be found using python -V \" pyPicoSDK version: \"Can be found using pip list or pip freeze \" PicoSDK version: \"Can be found in SDK docs location per PicoScope\" Steps to reproduce issue: \"Detail the steps to arrive at the same.\"","title":"Issues"},{"location":"dev/roadmap/","text":"Roadmap for pyPicoSDK WIP Streaming examples (inc. downsampling) To-do: ps5000(A) API - PicoScope 5000D Series ps4000(A) API - PicoScope 4000A Series","title":"Upcoming Roadmap"},{"location":"dev/roadmap/#roadmap-for-pypicosdk","text":"","title":"Roadmap for pyPicoSDK"},{"location":"dev/roadmap/#wip","text":"Streaming examples (inc. downsampling)","title":"WIP"},{"location":"dev/roadmap/#to-do","text":"ps5000(A) API - PicoScope 5000D Series ps4000(A) API - PicoScope 4000A Series","title":"To-do:"},{"location":"ref/configuration/","text":"pyPicoSDK Configuration/Overrides These functions allow you to override the pyPicoSDK package settings and configuration. override_directory(directory) Use this to specify the dictionary PicoSDK is in. pyPicoSDK will attempt to find PicoSDK through a list of expected locations. If your install of PicoSDK still isn't found, use this function to set it. Parameters: directory ( str ) \u2013 New directory location of PicoSDK. Defaults to None. Examples: >>> import pypicosdk as psdk >>> psdk.override_directory('C:/Program Files/Pico Technology/SDK')","title":"Config/Overrides"},{"location":"ref/configuration/#pypicosdk-configurationoverrides","text":"These functions allow you to override the pyPicoSDK package settings and configuration.","title":"pyPicoSDK Configuration/Overrides"},{"location":"ref/configuration/#pypicosdk._config.override_directory","text":"Use this to specify the dictionary PicoSDK is in. pyPicoSDK will attempt to find PicoSDK through a list of expected locations. If your install of PicoSDK still isn't found, use this function to set it. Parameters: directory ( str ) \u2013 New directory location of PicoSDK. Defaults to None. Examples: >>> import pypicosdk as psdk >>> psdk.override_directory('C:/Program Files/Pico Technology/SDK')","title":"override_directory"},{"location":"ref/constants/","text":"Constants/Enums pypicosdk.constants Copyright (C) 2025-2025 Pico Technology Ltd. See LICENSE file for terms. Classes: Name Description ACTION Action codes used to manage and clear data buffers. AUXIO_MODE Operating modes for the AUX IO connector. BANDWIDTH_CH Class for different bandwidth configurations. CHANNEL Constants representing PicoScope trigger and input channels. COUPLING Enum class representing different types of coupling used in signal processing. DATA_TYPE Class for different data types. DIGITAL_PORT Digital port identifiers for the 6000A series. DIGITAL_PORT_HYSTERESIS Hysteresis options for digital ports. PICO_CHANNEL_FLAGS Bit flags for enabled channels used by ps6000aChannelCombinationsStateless . PICO_CHANNEL_OVERVOLTAGE_TRIPPED Status flag indicating whether a channel's input protection tripped. PICO_CONDITION Trigger condition used by SetTriggerChannelConditions . PICO_CONNECT_PROBE_RANGE Input range identifiers for get_analogue_offset_limits . PICO_DIGITAL_CHANNEL_DIRECTIONS Structure describing a digital channel direction. PICO_DIGITAL_DIRECTION Digital trigger direction settings. PICO_DIRECTION Direction descriptor for SetTriggerChannelDirections . PICO_FIRMWARE_INFO Information describing firmware versions and updates. PICO_LED_COLOUR_PROPERTIES This structure is used with psospaSetLedColours() to define PICO_LED_STATE_PROPERTIES This structure is used with set_led_states() to define the PICO_PORT_DIGITAL_CHANNEL Digital channel identifiers within a port. PICO_PROBE_RANGE_INFO Probe attenuation identifiers for get_scaling_values . PICO_SCALING_FACTORS_FOR_RANGE_TYPES_VALUES Scaling factors for a probe range type. PICO_SCALING_FACTORS_VALUES Scaling factors for a channel and range. PICO_SIGGEN_TRIG_SOURCE Signal generator trigger source options. PICO_SIGGEN_TRIG_TYPE Trigger type for the signal generator. PICO_STREAMING_DATA_INFO Structure describing streaming data buffer information. PICO_STREAMING_DATA_TRIGGER_INFO Structure describing trigger information for streaming. PICO_TRIGGER_CHANNEL_PROPERTIES Trigger threshold configuration for a single channel. PICO_TRIGGER_INFO Structure describing trigger timing information. PICO_USB_POWER_DELIVERY Structure representing USB Power Delivery status information for a single USB port. PICO_USB_POWER_DETAILS Structure describing USB power details for a PicoScope device. PICO_VERSION Firmware or driver version information. POWER_SOURCE Defines different power source connection statuses. PULSE_WIDTH_TYPE Pulse width qualifier comparison types. RANGE Enum class representing different voltage ranges used in signal processing. RATIO_MODE Defines various ratio modes for signal processing. RESOLUTION Resolution constants for PicoScope devices. SIGGEN_FILTER_STATE Output filter state for the signal generator. SIGGEN_PARAMETER Parameters that can be queried with :func: siggen_limits . SWEEP_TYPE Sweep direction for signal generator. THRESHOLD_DIRECTION Enumerates trigger threshold directions used with :class: PICO_DIRECTION . THRESHOLD_MODE Threshold operation mode values used in :class: PICO_DIRECTION . TRIGGER_DIR Trigger direction constants for configuring PicoScope triggers. TRIGGER_STATE Trigger state values used in :class: PICO_CONDITION . TRIGGER_WITHIN_PRE_TRIGGER Control for :func: trigger_within_pre_trigger_samples . UNIT_INFO Unit information identifiers for querying PicoScope device details. WAVEFORM Waveform type constants for PicoScope signal generator configuration. Attributes: TIMESTAMP_COUNTER_MASK ( int ) \u2013 Mask for the 56-bit timeStampCounter field. TIMESTAMP_COUNTER_MASK = (1 << 56) - 1 module-attribute Mask for the 56-bit timeStampCounter field. ACTION Action codes used to manage and clear data buffers. These action codes are used with functions like setDataBuffer to specify the type of operation to perform on data buffers. Attributes: CLEAR_ALL \u2013 Clears all data buffers. ADD \u2013 Adds data to the buffer. CLEAR_THIS_DATA_BUFFER \u2013 Clears the current data buffer. CLEAR_WAVEFORM_DATA_BUFFERS \u2013 Clears all waveform data buffers. CLEAR_WAVEFORM_READ_DATA_BUFFERS \u2013 Clears the waveform read data buffers. AUXIO_MODE Operating modes for the AUX IO connector. BANDWIDTH_CH Class for different bandwidth configurations. Attributes: FULL \u2013 Full bandwidth configuration. BW_20MHZ \u2013 Bandwidth of 20 MHz. BW_200MHZ \u2013 Bandwidth of 200 MHz. CHANNEL Constants representing PicoScope trigger and input channels. Attributes: A \u2013 Channel A B \u2013 Channel B C \u2013 Channel C D \u2013 Channel D E \u2013 Channel E F \u2013 Channel F G \u2013 Channel G H \u2013 Channel H TRIGGER_AUX \u2013 Dedicated auxiliary trigger input COUPLING Enum class representing different types of coupling used in signal processing. Attributes: AC \u2013 Represents AC coupling. DC \u2013 Represents DC coupling. DC_50OHM \u2013 Represents 50 Ohm DC coupling. DATA_TYPE Class for different data types. Attributes: INT8_T \u2013 8-bit signed integer. INT16_T \u2013 16-bit signed integer. INT32_T \u2013 32-bit signed integer. UINT32_T \u2013 32-bit unsigned integer. INT64_T \u2013 64-bit signed integer. DIGITAL_PORT Digital port identifiers for the 6000A series. DIGITAL_PORT_HYSTERESIS Hysteresis options for digital ports. PICO_CHANNEL_FLAGS Bit flags for enabled channels used by ps6000aChannelCombinationsStateless . PICO_CHANNEL_OVERVOLTAGE_TRIPPED Status flag indicating whether a channel's input protection tripped. Attributes: channel_: Channel identifier as a :class: CHANNEL value. tripped_: 1 if the channel has tripped due to overvoltage. PICO_CONDITION Trigger condition used by SetTriggerChannelConditions . Each instance defines the state that a particular input source must meet for the overall trigger to occur. Attributes: source_ \u2013 Channel being monitored as a :class: CHANNEL value. condition_ \u2013 Desired state from :class: PICO_TRIGGER_STATE . PICO_CONNECT_PROBE_RANGE Input range identifiers for get_analogue_offset_limits . PICO_DIGITAL_CHANNEL_DIRECTIONS Structure describing a digital channel direction. PICO_DIGITAL_DIRECTION Digital trigger direction settings. PICO_DIRECTION Direction descriptor for SetTriggerChannelDirections . Attributes: channel_ \u2013 Channel index as a :class: CHANNEL value. direction_ \u2013 Direction from :class: PICO_THRESHOLD_DIRECTION . thresholdMode_ \u2013 Threshold mode from :class: PICO_THRESHOLD_MODE . PICO_FIRMWARE_INFO Information describing firmware versions and updates. Attributes: firmwareType_: Firmware identifier as a :class: UNIT_INFO value. currentVersion_: Currently installed :class: PICO_VERSION . updateVersion_: Available update :class: PICO_VERSION . updateRequired_: 1 if an update is required, otherwise 0 . PICO_LED_COLOUR_PROPERTIES This structure is used with psospaSetLedColours() to define the color for one LED using hue and saturation (HSV) values for the color. PICO_LED_STATE_PROPERTIES This structure is used with set_led_states() to define the state for one LED. PICO_PORT_DIGITAL_CHANNEL Digital channel identifiers within a port. PICO_PROBE_RANGE_INFO Probe attenuation identifiers for get_scaling_values . PICO_SCALING_FACTORS_FOR_RANGE_TYPES_VALUES Scaling factors for a probe range type. PICO_SCALING_FACTORS_VALUES Scaling factors for a channel and range. PICO_SIGGEN_TRIG_SOURCE Signal generator trigger source options. PICO_SIGGEN_TRIG_TYPE Trigger type for the signal generator. PICO_STREAMING_DATA_INFO Structure describing streaming data buffer information. PICO_STREAMING_DATA_TRIGGER_INFO Structure describing trigger information for streaming. All field names in this structure are defined with a trailing underscore so they match the C structure exactly. PICO_TRIGGER_CHANNEL_PROPERTIES Trigger threshold configuration for a single channel. The fields of this structure mirror the PICO_TRIGGER_CHANNEL_PROPERTIES definition in the PicoSDK headers. Each attribute name ends with an underscore so that the names match the underlying C struct when accessed from Python. Attributes: thresholdUpper_ \u2013 ADC counts for the upper trigger threshold. thresholdUpperHysteresis_ \u2013 Hysteresis applied to thresholdUpper_ in ADC counts. thresholdLower_ \u2013 ADC counts for the lower trigger threshold. thresholdLowerHysteresis_ \u2013 Hysteresis applied to thresholdLower_ in ADC counts. channel_ \u2013 Input channel that these properties apply to as a :class: CHANNEL value. PICO_TRIGGER_INFO Structure describing trigger timing information. All fields of this ctypes structure include a trailing underscore in their names. When you receive a :class: PICO_TRIGGER_INFO instance from :meth: ~pypicosdk.pypicosdk.PicoScopeBase.get_trigger_info or other functions, access the attributes using these exact names, for example info.triggerTime_ . Attributes: status_ \u2013 :class: PICO_STATUS value describing the trigger state. This may be a bitwise OR of multiple status flags such as PICO_DEVICE_TIME_STAMP_RESET or PICO_TRIGGER_TIME_NOT_REQUESTED . segmentIndex_ \u2013 Memory segment index from which the information was captured. triggerIndex_ \u2013 Sample index at which the trigger occurred. triggerTime_ \u2013 Time of the trigger event calculated with sub-sample resolution. timeUnits_ \u2013 Units for triggerTime_ as a :class: PICO_TIME_UNIT value. missedTriggers_ \u2013 Number of trigger events that occurred between this capture and the previous one. timeStampCounter_ \u2013 Timestamp in samples from the first capture. PICO_USB_POWER_DELIVERY Structure representing USB Power Delivery status information for a single USB port. This structure provides detailed information about the USB Power Delivery contract and status for a USB port, including voltage, current limits, connection state, and attached device type. Attributes: valid_ ( c_uint8 ) \u2013 Indicates whether the power delivery data is valid (non-zero if valid). busVoltagemV_ ( c_uint32 ) \u2013 The bus voltage in millivolts. rpCurrentLimitmA_ ( c_uint32 ) \u2013 The current limit for the Rp resistor in milliamps. partnerConnected_ ( c_uint8 ) \u2013 Indicates if a partner device is connected (non-zero if connected). ccPolarity_ ( c_uint8 ) \u2013 The polarity of the CC (Configuration Channel) line. attachedDevice_ ( c_uint8 ) \u2013 The type of device attached (corresponds to PICO_USB_POWER_DELIVERY_DEVICE_TYPE). contractExists_ ( c_uint8 ) \u2013 Indicates whether a power contract exists (non-zero if yes). currentPdo_ ( c_uint32 ) \u2013 The current Power Data Object (PDO) index. currentRdo_ ( c_uint32 ) \u2013 The current Request Data Object (RDO) index. PICO_USB_POWER_DETAILS Structure describing USB power details for a PicoScope device. Attributes: dataPort_ ( PICO_USB_POWER_DELIVERY ) \u2013 USB power delivery details related to the device's data port. powerPort_ ( PICO_USB_POWER_DELIVERY ) \u2013 USB power delivery details related to the device's power port. PICO_VERSION Firmware or driver version information. Attributes: major_: Major version number. minor_: Minor version number. revision_: Revision number. build_: Build number. POWER_SOURCE Defines different power source connection statuses. These values represent the connection status of a power supply or USB device. Attributes: SUPPLY_CONNECTED \u2013 Power supply is connected. SUPPLY_NOT_CONNECTED \u2013 Power supply is not connected. USB3_0_DEVICE_NON_USB3_0_PORT \u2013 USB 3.0 device is connected to a non-USB 3.0 port. PULSE_WIDTH_TYPE Pulse width qualifier comparison types. RANGE Enum class representing different voltage ranges used in signal processing. Attributes: mV10 \u2013 Voltage range of \u00b110 mV. mV20 \u2013 Voltage range of \u00b120 mV. mV50 \u2013 Voltage range of \u00b150 mV. mV100 \u2013 Voltage range of \u00b1100 mV. mV200 \u2013 Voltage range of \u00b1200 mV. mV500 \u2013 Voltage range of \u00b1500 mV. V1 \u2013 Voltage range of \u00b11 V. V2 \u2013 Voltage range of \u00b12 V. V5 \u2013 Voltage range of \u00b15 V. V10 \u2013 Voltage range of \u00b110 V. V20 \u2013 Voltage range of \u00b120 V. V50 \u2013 Voltage range of \u00b150 V. RATIO_MODE Defines various ratio modes for signal processing. Attributes: AGGREGATE \u2013 Aggregate mode for data processing. DECIMATE \u2013 Decimation mode for reducing data resolution. AVERAGE \u2013 Averaging mode for smoothing data. DISTRIBUTION \u2013 Mode for calculating distribution statistics. SUM \u2013 Mode for summing data. TRIGGER_DATA_FOR_TIME_CALCULATION \u2013 Mode for calculating trigger data for time-based calculations. SEGMENT_HEADER \u2013 Mode for segment header data processing. TRIGGER \u2013 Trigger mode for event-based data. If manually setting buffers, TRIGGER will need its own buffer set. RAW \u2013 Raw data mode, without any processing. RESOLUTION Resolution constants for PicoScope devices. WARNING: Not all devices support all resolutions. Attributes: _8BIT \u2013 8-bit resolution. _10BIT \u2013 10-bit resolution. _12BIT \u2013 12-bit resolution. _14BIT \u2013 14-bit resolution. _15BIT \u2013 15-bit resolution. _16BIT \u2013 16-bit resolution. Examples: >>> scope.open_unit(resolution=RESOLUTION._16BIT) SIGGEN_FILTER_STATE Output filter state for the signal generator. SIGGEN_PARAMETER Parameters that can be queried with :func: siggen_limits . Attributes: OUTPUT_VOLTS \u2013 0 SAMPLE \u2013 1 BUFFER_LENGTH \u2013 2 SWEEP_TYPE Sweep direction for signal generator. THRESHOLD_DIRECTION Enumerates trigger threshold directions used with :class: PICO_DIRECTION . THRESHOLD_MODE Threshold operation mode values used in :class: PICO_DIRECTION . TRIGGER_DIR Trigger direction constants for configuring PicoScope triggers. Attributes: ABOVE \u2013 Trigger when the signal goes above the threshold. BELOW \u2013 Trigger when the signal goes below the threshold. RISING \u2013 Trigger on rising edge. FALLING \u2013 Trigger on falling edge. RISING_OR_FALLING \u2013 Trigger on either rising or falling edge. TRIGGER_STATE Trigger state values used in :class: PICO_CONDITION . TRIGGER_WITHIN_PRE_TRIGGER Control for :func: trigger_within_pre_trigger_samples . UNIT_INFO Unit information identifiers for querying PicoScope device details. Attributes: PICO_DRIVER_VERSION \u2013 PicoSDK driver version. PICO_USB_VERSION \u2013 USB version (e.g., USB 2.0 or USB 3.0). PICO_HARDWARE_VERSION \u2013 Hardware version of the PicoScope. PICO_VARIANT_INFO \u2013 Device model or variant identifier. PICO_BATCH_AND_SERIAL \u2013 Batch and serial number of the device. PICO_CAL_DATE \u2013 Device calibration date. PICO_KERNEL_VERSION \u2013 Kernel driver version. PICO_DIGITAL_HARDWARE_VERSION \u2013 Digital board hardware version. PICO_ANALOGUE_HARDWARE_VERSION \u2013 Analogue board hardware version. PICO_FIRMWARE_VERSION_1 \u2013 First part of the firmware version. PICO_FIRMWARE_VERSION_2 \u2013 Second part of the firmware version. Examples: >>> scope.get_unit_info(picosdk.UNIT_INFO.PICO_BATCH_AND_SERIAL) \"JM115/0007\" WAVEFORM Waveform type constants for PicoScope signal generator configuration. Attributes: SINE \u2013 Sine wave. SQUARE \u2013 Square wave. TRIANGLE \u2013 Triangle wave. RAMP_UP \u2013 Rising ramp waveform. RAMP_DOWN \u2013 Falling ramp waveform. SINC \u2013 Sinc function waveform. GAUSSIAN \u2013 Gaussian waveform. HALF_SINE \u2013 Half sine waveform. DC_VOLTAGE \u2013 Constant DC voltage output. PWM \u2013 Pulse-width modulation waveform. WHITENOISE \u2013 White noise output. PRBS \u2013 Pseudo-random binary sequence. ARBITRARY \u2013 Arbitrary user-defined waveform.","title":"Constants/Enums"},{"location":"ref/constants/#constantsenums","text":"","title":"Constants/Enums"},{"location":"ref/constants/#pypicosdk.constants","text":"Copyright (C) 2025-2025 Pico Technology Ltd. See LICENSE file for terms. Classes: Name Description ACTION Action codes used to manage and clear data buffers. AUXIO_MODE Operating modes for the AUX IO connector. BANDWIDTH_CH Class for different bandwidth configurations. CHANNEL Constants representing PicoScope trigger and input channels. COUPLING Enum class representing different types of coupling used in signal processing. DATA_TYPE Class for different data types. DIGITAL_PORT Digital port identifiers for the 6000A series. DIGITAL_PORT_HYSTERESIS Hysteresis options for digital ports. PICO_CHANNEL_FLAGS Bit flags for enabled channels used by ps6000aChannelCombinationsStateless . PICO_CHANNEL_OVERVOLTAGE_TRIPPED Status flag indicating whether a channel's input protection tripped. PICO_CONDITION Trigger condition used by SetTriggerChannelConditions . PICO_CONNECT_PROBE_RANGE Input range identifiers for get_analogue_offset_limits . PICO_DIGITAL_CHANNEL_DIRECTIONS Structure describing a digital channel direction. PICO_DIGITAL_DIRECTION Digital trigger direction settings. PICO_DIRECTION Direction descriptor for SetTriggerChannelDirections . PICO_FIRMWARE_INFO Information describing firmware versions and updates. PICO_LED_COLOUR_PROPERTIES This structure is used with psospaSetLedColours() to define PICO_LED_STATE_PROPERTIES This structure is used with set_led_states() to define the PICO_PORT_DIGITAL_CHANNEL Digital channel identifiers within a port. PICO_PROBE_RANGE_INFO Probe attenuation identifiers for get_scaling_values . PICO_SCALING_FACTORS_FOR_RANGE_TYPES_VALUES Scaling factors for a probe range type. PICO_SCALING_FACTORS_VALUES Scaling factors for a channel and range. PICO_SIGGEN_TRIG_SOURCE Signal generator trigger source options. PICO_SIGGEN_TRIG_TYPE Trigger type for the signal generator. PICO_STREAMING_DATA_INFO Structure describing streaming data buffer information. PICO_STREAMING_DATA_TRIGGER_INFO Structure describing trigger information for streaming. PICO_TRIGGER_CHANNEL_PROPERTIES Trigger threshold configuration for a single channel. PICO_TRIGGER_INFO Structure describing trigger timing information. PICO_USB_POWER_DELIVERY Structure representing USB Power Delivery status information for a single USB port. PICO_USB_POWER_DETAILS Structure describing USB power details for a PicoScope device. PICO_VERSION Firmware or driver version information. POWER_SOURCE Defines different power source connection statuses. PULSE_WIDTH_TYPE Pulse width qualifier comparison types. RANGE Enum class representing different voltage ranges used in signal processing. RATIO_MODE Defines various ratio modes for signal processing. RESOLUTION Resolution constants for PicoScope devices. SIGGEN_FILTER_STATE Output filter state for the signal generator. SIGGEN_PARAMETER Parameters that can be queried with :func: siggen_limits . SWEEP_TYPE Sweep direction for signal generator. THRESHOLD_DIRECTION Enumerates trigger threshold directions used with :class: PICO_DIRECTION . THRESHOLD_MODE Threshold operation mode values used in :class: PICO_DIRECTION . TRIGGER_DIR Trigger direction constants for configuring PicoScope triggers. TRIGGER_STATE Trigger state values used in :class: PICO_CONDITION . TRIGGER_WITHIN_PRE_TRIGGER Control for :func: trigger_within_pre_trigger_samples . UNIT_INFO Unit information identifiers for querying PicoScope device details. WAVEFORM Waveform type constants for PicoScope signal generator configuration. Attributes: TIMESTAMP_COUNTER_MASK ( int ) \u2013 Mask for the 56-bit timeStampCounter field.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-module\"></code>&nbsp;constants"},{"location":"ref/constants/#pypicosdk.constants.TIMESTAMP_COUNTER_MASK","text":"Mask for the 56-bit timeStampCounter field.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-attribute\"></code>&nbsp;TIMESTAMP_COUNTER_MASK"},{"location":"ref/constants/#pypicosdk.constants.ACTION","text":"Action codes used to manage and clear data buffers. These action codes are used with functions like setDataBuffer to specify the type of operation to perform on data buffers. Attributes: CLEAR_ALL \u2013 Clears all data buffers. ADD \u2013 Adds data to the buffer. CLEAR_THIS_DATA_BUFFER \u2013 Clears the current data buffer. CLEAR_WAVEFORM_DATA_BUFFERS \u2013 Clears all waveform data buffers. CLEAR_WAVEFORM_READ_DATA_BUFFERS \u2013 Clears the waveform read data buffers.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ACTION"},{"location":"ref/constants/#pypicosdk.constants.AUXIO_MODE","text":"Operating modes for the AUX IO connector.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;AUXIO_MODE"},{"location":"ref/constants/#pypicosdk.constants.BANDWIDTH_CH","text":"Class for different bandwidth configurations. Attributes: FULL \u2013 Full bandwidth configuration. BW_20MHZ \u2013 Bandwidth of 20 MHz. BW_200MHZ \u2013 Bandwidth of 200 MHz.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;BANDWIDTH_CH"},{"location":"ref/constants/#pypicosdk.constants.CHANNEL","text":"Constants representing PicoScope trigger and input channels. Attributes: A \u2013 Channel A B \u2013 Channel B C \u2013 Channel C D \u2013 Channel D E \u2013 Channel E F \u2013 Channel F G \u2013 Channel G H \u2013 Channel H TRIGGER_AUX \u2013 Dedicated auxiliary trigger input","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;CHANNEL"},{"location":"ref/constants/#pypicosdk.constants.COUPLING","text":"Enum class representing different types of coupling used in signal processing. Attributes: AC \u2013 Represents AC coupling. DC \u2013 Represents DC coupling. DC_50OHM \u2013 Represents 50 Ohm DC coupling.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;COUPLING"},{"location":"ref/constants/#pypicosdk.constants.DATA_TYPE","text":"Class for different data types. Attributes: INT8_T \u2013 8-bit signed integer. INT16_T \u2013 16-bit signed integer. INT32_T \u2013 32-bit signed integer. UINT32_T \u2013 32-bit unsigned integer. INT64_T \u2013 64-bit signed integer.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DATA_TYPE"},{"location":"ref/constants/#pypicosdk.constants.DIGITAL_PORT","text":"Digital port identifiers for the 6000A series.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DIGITAL_PORT"},{"location":"ref/constants/#pypicosdk.constants.DIGITAL_PORT_HYSTERESIS","text":"Hysteresis options for digital ports.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;DIGITAL_PORT_HYSTERESIS"},{"location":"ref/constants/#pypicosdk.constants.PICO_CHANNEL_FLAGS","text":"Bit flags for enabled channels used by ps6000aChannelCombinationsStateless .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_CHANNEL_FLAGS"},{"location":"ref/constants/#pypicosdk.constants.PICO_CHANNEL_OVERVOLTAGE_TRIPPED","text":"Status flag indicating whether a channel's input protection tripped. Attributes: channel_: Channel identifier as a :class: CHANNEL value. tripped_: 1 if the channel has tripped due to overvoltage.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_CHANNEL_OVERVOLTAGE_TRIPPED"},{"location":"ref/constants/#pypicosdk.constants.PICO_CONDITION","text":"Trigger condition used by SetTriggerChannelConditions . Each instance defines the state that a particular input source must meet for the overall trigger to occur. Attributes: source_ \u2013 Channel being monitored as a :class: CHANNEL value. condition_ \u2013 Desired state from :class: PICO_TRIGGER_STATE .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_CONDITION"},{"location":"ref/constants/#pypicosdk.constants.PICO_CONNECT_PROBE_RANGE","text":"Input range identifiers for get_analogue_offset_limits .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_CONNECT_PROBE_RANGE"},{"location":"ref/constants/#pypicosdk.constants.PICO_DIGITAL_CHANNEL_DIRECTIONS","text":"Structure describing a digital channel direction.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_DIGITAL_CHANNEL_DIRECTIONS"},{"location":"ref/constants/#pypicosdk.constants.PICO_DIGITAL_DIRECTION","text":"Digital trigger direction settings.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_DIGITAL_DIRECTION"},{"location":"ref/constants/#pypicosdk.constants.PICO_DIRECTION","text":"Direction descriptor for SetTriggerChannelDirections . Attributes: channel_ \u2013 Channel index as a :class: CHANNEL value. direction_ \u2013 Direction from :class: PICO_THRESHOLD_DIRECTION . thresholdMode_ \u2013 Threshold mode from :class: PICO_THRESHOLD_MODE .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_DIRECTION"},{"location":"ref/constants/#pypicosdk.constants.PICO_FIRMWARE_INFO","text":"Information describing firmware versions and updates. Attributes: firmwareType_: Firmware identifier as a :class: UNIT_INFO value. currentVersion_: Currently installed :class: PICO_VERSION . updateVersion_: Available update :class: PICO_VERSION . updateRequired_: 1 if an update is required, otherwise 0 .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_FIRMWARE_INFO"},{"location":"ref/constants/#pypicosdk.constants.PICO_LED_COLOUR_PROPERTIES","text":"This structure is used with psospaSetLedColours() to define the color for one LED using hue and saturation (HSV) values for the color.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_LED_COLOUR_PROPERTIES"},{"location":"ref/constants/#pypicosdk.constants.PICO_LED_STATE_PROPERTIES","text":"This structure is used with set_led_states() to define the state for one LED.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_LED_STATE_PROPERTIES"},{"location":"ref/constants/#pypicosdk.constants.PICO_PORT_DIGITAL_CHANNEL","text":"Digital channel identifiers within a port.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_PORT_DIGITAL_CHANNEL"},{"location":"ref/constants/#pypicosdk.constants.PICO_PROBE_RANGE_INFO","text":"Probe attenuation identifiers for get_scaling_values .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_PROBE_RANGE_INFO"},{"location":"ref/constants/#pypicosdk.constants.PICO_SCALING_FACTORS_FOR_RANGE_TYPES_VALUES","text":"Scaling factors for a probe range type.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_SCALING_FACTORS_FOR_RANGE_TYPES_VALUES"},{"location":"ref/constants/#pypicosdk.constants.PICO_SCALING_FACTORS_VALUES","text":"Scaling factors for a channel and range.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_SCALING_FACTORS_VALUES"},{"location":"ref/constants/#pypicosdk.constants.PICO_SIGGEN_TRIG_SOURCE","text":"Signal generator trigger source options.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_SIGGEN_TRIG_SOURCE"},{"location":"ref/constants/#pypicosdk.constants.PICO_SIGGEN_TRIG_TYPE","text":"Trigger type for the signal generator.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_SIGGEN_TRIG_TYPE"},{"location":"ref/constants/#pypicosdk.constants.PICO_STREAMING_DATA_INFO","text":"Structure describing streaming data buffer information.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_STREAMING_DATA_INFO"},{"location":"ref/constants/#pypicosdk.constants.PICO_STREAMING_DATA_TRIGGER_INFO","text":"Structure describing trigger information for streaming. All field names in this structure are defined with a trailing underscore so they match the C structure exactly.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_STREAMING_DATA_TRIGGER_INFO"},{"location":"ref/constants/#pypicosdk.constants.PICO_TRIGGER_CHANNEL_PROPERTIES","text":"Trigger threshold configuration for a single channel. The fields of this structure mirror the PICO_TRIGGER_CHANNEL_PROPERTIES definition in the PicoSDK headers. Each attribute name ends with an underscore so that the names match the underlying C struct when accessed from Python. Attributes: thresholdUpper_ \u2013 ADC counts for the upper trigger threshold. thresholdUpperHysteresis_ \u2013 Hysteresis applied to thresholdUpper_ in ADC counts. thresholdLower_ \u2013 ADC counts for the lower trigger threshold. thresholdLowerHysteresis_ \u2013 Hysteresis applied to thresholdLower_ in ADC counts. channel_ \u2013 Input channel that these properties apply to as a :class: CHANNEL value.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_TRIGGER_CHANNEL_PROPERTIES"},{"location":"ref/constants/#pypicosdk.constants.PICO_TRIGGER_INFO","text":"Structure describing trigger timing information. All fields of this ctypes structure include a trailing underscore in their names. When you receive a :class: PICO_TRIGGER_INFO instance from :meth: ~pypicosdk.pypicosdk.PicoScopeBase.get_trigger_info or other functions, access the attributes using these exact names, for example info.triggerTime_ . Attributes: status_ \u2013 :class: PICO_STATUS value describing the trigger state. This may be a bitwise OR of multiple status flags such as PICO_DEVICE_TIME_STAMP_RESET or PICO_TRIGGER_TIME_NOT_REQUESTED . segmentIndex_ \u2013 Memory segment index from which the information was captured. triggerIndex_ \u2013 Sample index at which the trigger occurred. triggerTime_ \u2013 Time of the trigger event calculated with sub-sample resolution. timeUnits_ \u2013 Units for triggerTime_ as a :class: PICO_TIME_UNIT value. missedTriggers_ \u2013 Number of trigger events that occurred between this capture and the previous one. timeStampCounter_ \u2013 Timestamp in samples from the first capture.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_TRIGGER_INFO"},{"location":"ref/constants/#pypicosdk.constants.PICO_USB_POWER_DELIVERY","text":"Structure representing USB Power Delivery status information for a single USB port. This structure provides detailed information about the USB Power Delivery contract and status for a USB port, including voltage, current limits, connection state, and attached device type. Attributes: valid_ ( c_uint8 ) \u2013 Indicates whether the power delivery data is valid (non-zero if valid). busVoltagemV_ ( c_uint32 ) \u2013 The bus voltage in millivolts. rpCurrentLimitmA_ ( c_uint32 ) \u2013 The current limit for the Rp resistor in milliamps. partnerConnected_ ( c_uint8 ) \u2013 Indicates if a partner device is connected (non-zero if connected). ccPolarity_ ( c_uint8 ) \u2013 The polarity of the CC (Configuration Channel) line. attachedDevice_ ( c_uint8 ) \u2013 The type of device attached (corresponds to PICO_USB_POWER_DELIVERY_DEVICE_TYPE). contractExists_ ( c_uint8 ) \u2013 Indicates whether a power contract exists (non-zero if yes). currentPdo_ ( c_uint32 ) \u2013 The current Power Data Object (PDO) index. currentRdo_ ( c_uint32 ) \u2013 The current Request Data Object (RDO) index.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_USB_POWER_DELIVERY"},{"location":"ref/constants/#pypicosdk.constants.PICO_USB_POWER_DETAILS","text":"Structure describing USB power details for a PicoScope device. Attributes: dataPort_ ( PICO_USB_POWER_DELIVERY ) \u2013 USB power delivery details related to the device's data port. powerPort_ ( PICO_USB_POWER_DELIVERY ) \u2013 USB power delivery details related to the device's power port.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_USB_POWER_DETAILS"},{"location":"ref/constants/#pypicosdk.constants.PICO_VERSION","text":"Firmware or driver version information. Attributes: major_: Major version number. minor_: Minor version number. revision_: Revision number. build_: Build number.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PICO_VERSION"},{"location":"ref/constants/#pypicosdk.constants.POWER_SOURCE","text":"Defines different power source connection statuses. These values represent the connection status of a power supply or USB device. Attributes: SUPPLY_CONNECTED \u2013 Power supply is connected. SUPPLY_NOT_CONNECTED \u2013 Power supply is not connected. USB3_0_DEVICE_NON_USB3_0_PORT \u2013 USB 3.0 device is connected to a non-USB 3.0 port.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;POWER_SOURCE"},{"location":"ref/constants/#pypicosdk.constants.PULSE_WIDTH_TYPE","text":"Pulse width qualifier comparison types.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;PULSE_WIDTH_TYPE"},{"location":"ref/constants/#pypicosdk.constants.RANGE","text":"Enum class representing different voltage ranges used in signal processing. Attributes: mV10 \u2013 Voltage range of \u00b110 mV. mV20 \u2013 Voltage range of \u00b120 mV. mV50 \u2013 Voltage range of \u00b150 mV. mV100 \u2013 Voltage range of \u00b1100 mV. mV200 \u2013 Voltage range of \u00b1200 mV. mV500 \u2013 Voltage range of \u00b1500 mV. V1 \u2013 Voltage range of \u00b11 V. V2 \u2013 Voltage range of \u00b12 V. V5 \u2013 Voltage range of \u00b15 V. V10 \u2013 Voltage range of \u00b110 V. V20 \u2013 Voltage range of \u00b120 V. V50 \u2013 Voltage range of \u00b150 V.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;RANGE"},{"location":"ref/constants/#pypicosdk.constants.RATIO_MODE","text":"Defines various ratio modes for signal processing. Attributes: AGGREGATE \u2013 Aggregate mode for data processing. DECIMATE \u2013 Decimation mode for reducing data resolution. AVERAGE \u2013 Averaging mode for smoothing data. DISTRIBUTION \u2013 Mode for calculating distribution statistics. SUM \u2013 Mode for summing data. TRIGGER_DATA_FOR_TIME_CALCULATION \u2013 Mode for calculating trigger data for time-based calculations. SEGMENT_HEADER \u2013 Mode for segment header data processing. TRIGGER \u2013 Trigger mode for event-based data. If manually setting buffers, TRIGGER will need its own buffer set. RAW \u2013 Raw data mode, without any processing.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;RATIO_MODE"},{"location":"ref/constants/#pypicosdk.constants.RESOLUTION","text":"Resolution constants for PicoScope devices. WARNING: Not all devices support all resolutions. Attributes: _8BIT \u2013 8-bit resolution. _10BIT \u2013 10-bit resolution. _12BIT \u2013 12-bit resolution. _14BIT \u2013 14-bit resolution. _15BIT \u2013 15-bit resolution. _16BIT \u2013 16-bit resolution. Examples: >>> scope.open_unit(resolution=RESOLUTION._16BIT)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;RESOLUTION"},{"location":"ref/constants/#pypicosdk.constants.SIGGEN_FILTER_STATE","text":"Output filter state for the signal generator.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;SIGGEN_FILTER_STATE"},{"location":"ref/constants/#pypicosdk.constants.SIGGEN_PARAMETER","text":"Parameters that can be queried with :func: siggen_limits . Attributes: OUTPUT_VOLTS \u2013 0 SAMPLE \u2013 1 BUFFER_LENGTH \u2013 2","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;SIGGEN_PARAMETER"},{"location":"ref/constants/#pypicosdk.constants.SWEEP_TYPE","text":"Sweep direction for signal generator.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;SWEEP_TYPE"},{"location":"ref/constants/#pypicosdk.constants.THRESHOLD_DIRECTION","text":"Enumerates trigger threshold directions used with :class: PICO_DIRECTION .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;THRESHOLD_DIRECTION"},{"location":"ref/constants/#pypicosdk.constants.THRESHOLD_MODE","text":"Threshold operation mode values used in :class: PICO_DIRECTION .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;THRESHOLD_MODE"},{"location":"ref/constants/#pypicosdk.constants.TRIGGER_DIR","text":"Trigger direction constants for configuring PicoScope triggers. Attributes: ABOVE \u2013 Trigger when the signal goes above the threshold. BELOW \u2013 Trigger when the signal goes below the threshold. RISING \u2013 Trigger on rising edge. FALLING \u2013 Trigger on falling edge. RISING_OR_FALLING \u2013 Trigger on either rising or falling edge.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;TRIGGER_DIR"},{"location":"ref/constants/#pypicosdk.constants.TRIGGER_STATE","text":"Trigger state values used in :class: PICO_CONDITION .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;TRIGGER_STATE"},{"location":"ref/constants/#pypicosdk.constants.TRIGGER_WITHIN_PRE_TRIGGER","text":"Control for :func: trigger_within_pre_trigger_samples .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;TRIGGER_WITHIN_PRE_TRIGGER"},{"location":"ref/constants/#pypicosdk.constants.UNIT_INFO","text":"Unit information identifiers for querying PicoScope device details. Attributes: PICO_DRIVER_VERSION \u2013 PicoSDK driver version. PICO_USB_VERSION \u2013 USB version (e.g., USB 2.0 or USB 3.0). PICO_HARDWARE_VERSION \u2013 Hardware version of the PicoScope. PICO_VARIANT_INFO \u2013 Device model or variant identifier. PICO_BATCH_AND_SERIAL \u2013 Batch and serial number of the device. PICO_CAL_DATE \u2013 Device calibration date. PICO_KERNEL_VERSION \u2013 Kernel driver version. PICO_DIGITAL_HARDWARE_VERSION \u2013 Digital board hardware version. PICO_ANALOGUE_HARDWARE_VERSION \u2013 Analogue board hardware version. PICO_FIRMWARE_VERSION_1 \u2013 First part of the firmware version. PICO_FIRMWARE_VERSION_2 \u2013 Second part of the firmware version. Examples: >>> scope.get_unit_info(picosdk.UNIT_INFO.PICO_BATCH_AND_SERIAL) \"JM115/0007\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;UNIT_INFO"},{"location":"ref/constants/#pypicosdk.constants.WAVEFORM","text":"Waveform type constants for PicoScope signal generator configuration. Attributes: SINE \u2013 Sine wave. SQUARE \u2013 Square wave. TRIANGLE \u2013 Triangle wave. RAMP_UP \u2013 Rising ramp waveform. RAMP_DOWN \u2013 Falling ramp waveform. SINC \u2013 Sinc function waveform. GAUSSIAN \u2013 Gaussian waveform. HALF_SINE \u2013 Half sine waveform. DC_VOLTAGE \u2013 Constant DC voltage output. PWM \u2013 Pulse-width modulation waveform. WHITENOISE \u2013 White noise output. PRBS \u2013 Pseudo-random binary sequence. ARBITRARY \u2013 Arbitrary user-defined waveform.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;WAVEFORM"},{"location":"ref/general/","text":"General Functions These functions are not scope specific, so will need to be called using psdk.[function] or pypicosdk.[function] where [function] is one of the following: Copyright (C) 2025-2025 Pico Technology Ltd. See LICENSE file for terms. Functions: Name Description convert_time_axis Converts a time axis array from one unit to another. get_all_enumerated_units Enumerate all supported PicoScope units. resolution_enhancement Returns the buffer after applying a moving average filter with the specified window size. convert_time_axis(time_axis, current_units, convert_units) Converts a time axis array from one unit to another. This method calculates a scaling factor by comparing the exponents of the current and target units, then multiplies the time axis array by this factor. Parameters: time_axis ( ndarray ) \u2013 The NumPy array of time values to be converted. current_units ( str | time_standard_form_l ) \u2013 The starting time unit of the data (e.g., 's', 'ms', 'us'). convert_units ( str | time_standard_form_l ) \u2013 The target time unit for the conversion (e.g., 'ns'). Returns: ndarray \u2013 A tuple containing the new NumPy array scaled to the target units, str \u2013 and a string representing the target units. Examples: >>> from pypicosdk import convert_time_axis >>> new_time_axis = convert_time_axis(old_time_axis, 'ns', 'ms') get_all_enumerated_units() Enumerate all supported PicoScope units. Returns: tuple [ int , list [ str ]] \u2013 Tuple containing number of units and a list of unit serials. Examples: >>> from pypicosdk import get_all_enumerated_units >>> n_units, unit_list = get_all_enumerated_units() >>> print(n_units, unit_list) resolution_enhancement(buffer, enhanced_bits, padded=True) Returns the buffer after applying a moving average filter with the specified window size. Parameters: buffer ( ndarray ) \u2013 The input numpy array (e.g., the voltage buffer). enhanced_bits ( float ) \u2013 The number of bits to increase by. Between [0.5 - 4]. padded ( bool , default: True ) \u2013 If true, data is extended to produce an output the same size If false, data will be smaller by the window size due to the moving average method. Returns: ndarray \u2013 A numpy ndarray containing enhanced data. Examples: >>> from pypicosdk import resolution_enhancement >>> enhanced_buffer = resolution_enhancement(buffer, enhanced_bits=2)","title":"General Functions"},{"location":"ref/general/#general-functions","text":"These functions are not scope specific, so will need to be called using psdk.[function] or pypicosdk.[function] where [function] is one of the following: Copyright (C) 2025-2025 Pico Technology Ltd. See LICENSE file for terms. Functions: Name Description convert_time_axis Converts a time axis array from one unit to another. get_all_enumerated_units Enumerate all supported PicoScope units. resolution_enhancement Returns the buffer after applying a moving average filter with the specified window size.","title":"General Functions"},{"location":"ref/general/#pypicosdk.pypicosdk.convert_time_axis","text":"Converts a time axis array from one unit to another. This method calculates a scaling factor by comparing the exponents of the current and target units, then multiplies the time axis array by this factor. Parameters: time_axis ( ndarray ) \u2013 The NumPy array of time values to be converted. current_units ( str | time_standard_form_l ) \u2013 The starting time unit of the data (e.g., 's', 'ms', 'us'). convert_units ( str | time_standard_form_l ) \u2013 The target time unit for the conversion (e.g., 'ns'). Returns: ndarray \u2013 A tuple containing the new NumPy array scaled to the target units, str \u2013 and a string representing the target units. Examples: >>> from pypicosdk import convert_time_axis >>> new_time_axis = convert_time_axis(old_time_axis, 'ns', 'ms')","title":"convert_time_axis"},{"location":"ref/general/#pypicosdk.pypicosdk.get_all_enumerated_units","text":"Enumerate all supported PicoScope units. Returns: tuple [ int , list [ str ]] \u2013 Tuple containing number of units and a list of unit serials. Examples: >>> from pypicosdk import get_all_enumerated_units >>> n_units, unit_list = get_all_enumerated_units() >>> print(n_units, unit_list)","title":"get_all_enumerated_units"},{"location":"ref/general/#pypicosdk.pypicosdk.resolution_enhancement","text":"Returns the buffer after applying a moving average filter with the specified window size. Parameters: buffer ( ndarray ) \u2013 The input numpy array (e.g., the voltage buffer). enhanced_bits ( float ) \u2013 The number of bits to increase by. Between [0.5 - 4]. padded ( bool , default: True ) \u2013 If true, data is extended to produce an output the same size If false, data will be smaller by the window size due to the moving average method. Returns: ndarray \u2013 A numpy ndarray containing enhanced data. Examples: >>> from pypicosdk import resolution_enhancement >>> enhanced_buffer = resolution_enhancement(buffer, enhanced_bits=2)","title":"resolution_enhancement"},{"location":"ref/introduction/","text":"Introduction Each picoSDK class is built from a common class (PicoScopeBase) and a specific sub-class (ps####a). This allows each PicoScope to have shared, common functions such as opening the unit, while certain models have additional, hardware-specific functions. C PicoSDK (ctypes) This wrapper is built over the C DLL drivers from Pico Technology. Therefore most basic python functions (such as run_block() ) have a counterpart in the C library (e.g. ps6000aRunBlockMode() ). These python functions parse the variables through the DLL's using the ctypes package to talk directly to the unit. For reference on these DLL's and their C implementation, go to https://www.picotech.com/downloads/documentation and look for your PicoScope Programmer's Guide. FAQ's Does my PicoScope use ps6000a() or ps6000()? The PicoScope (A) drivers are the latest generation of drivers from Pico Technology. If you have a PicoScope with a letter designation higher than the following, you will need to use the (A) class and drivers: PicoScope 6000 E","title":"Introduction"},{"location":"ref/introduction/#introduction","text":"Each picoSDK class is built from a common class (PicoScopeBase) and a specific sub-class (ps####a). This allows each PicoScope to have shared, common functions such as opening the unit, while certain models have additional, hardware-specific functions.","title":"Introduction"},{"location":"ref/introduction/#c-picosdk-ctypes","text":"This wrapper is built over the C DLL drivers from Pico Technology. Therefore most basic python functions (such as run_block() ) have a counterpart in the C library (e.g. ps6000aRunBlockMode() ). These python functions parse the variables through the DLL's using the ctypes package to talk directly to the unit. For reference on these DLL's and their C implementation, go to https://www.picotech.com/downloads/documentation and look for your PicoScope Programmer's Guide.","title":"C PicoSDK (ctypes)"},{"location":"ref/introduction/#faqs","text":"","title":"FAQ's"},{"location":"ref/introduction/#does-my-picoscope-use-ps6000a-or-ps6000","text":"The PicoScope (A) drivers are the latest generation of drivers from Pico Technology. If you have a PicoScope with a letter designation higher than the following, you will need to use the (A) class and drivers: PicoScope 6000 E","title":"Does my PicoScope use ps6000a() or ps6000()?"},{"location":"ref/ps6000a/buffers/","text":"Memory / Buffer Management Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_maximum_available_memory Return the maximum sample depth for the current resolution. memory_segments Configure the number of memory segments. memory_segments_by_samples Set the samples per memory segment. set_data_buffer Allocates and assigns a data buffer for a specified channel on the 6000A series. set_data_buffer_for_enabled_channels Sets data buffers for enabled channels set by picosdk.set_channel() set_data_buffer_rapid_capture Allocates and assigns multiple data buffers for rapid block capture on a specified channel. set_data_buffers Allocate and assign max and min NumPy-backed data buffers. set_data_buffers_rapid_capture Allocate and assign max and min NumPy-backed data buffers for rapid block get_maximum_available_memory() Return the maximum sample depth for the current resolution. Wraps ps6000aGetMaximumAvailableMemory to query how many samples can be captured at self.resolution . Returns: int: Maximum number of samples supported. Raises: PicoSDKException: If the device has not been opened. memory_segments(n_segments) Configure the number of memory segments. This wraps the ps6000aMemorySegments API call. Parameters: n_segments ( int ) \u2013 Desired number of memory segments. Returns: int ( int ) \u2013 Number of samples available in each segment. memory_segments_by_samples(n_samples) Set the samples per memory segment. This wraps ps6000aMemorySegmentsBySamples which divides the capture memory so that each segment holds n_samples samples. Parameters: n_samples ( int ) \u2013 Number of samples per segment. Returns: int ( int ) \u2013 Number of segments the memory was divided into. set_data_buffer(channel, samples, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, action=ACTION.CLEAR_ALL | ACTION.ADD, buffer=None) Allocates and assigns a data buffer for a specified channel on the 6000A series. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). buffer ( ndarray | None , default: None ) \u2013 Send a preallocated numpy buffer to be populated. If left as None, this function creates its own buffer. Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided. set_data_buffer_for_enabled_channels(samples, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, clear_buffer=True, captures=0) Sets data buffers for enabled channels set by picosdk.set_channel() Parameters: samples ( int ) \u2013 The sample buffer or size to allocate. segment ( int , default: 0 ) \u2013 The memory segment index. datatype ( DATA_TYPE , default: INT16_T ) \u2013 The data type used for the buffer. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 The ratio mode (e.g., RAW, AVERAGE). clear_buffer ( bool , default: True ) \u2013 If True, clear the buffer first captures ( int , default: 0 ) \u2013 If larger than 0, it will create multiple buffers for RAPID mode. Returns: dict ( dict ) \u2013 A dictionary mapping each channel to its associated data buffer. set_data_buffer_rapid_capture(channel, samples, captures, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, action=ACTION.CLEAR_ALL | ACTION.ADD) Allocates and assigns multiple data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided. set_data_buffers(channel, samples, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.AGGREGATE, action=ACTION.CLEAR_ALL | ACTION.ADD, buffers=None) Allocate and assign max and min NumPy-backed data buffers. Parameters: channel ( int ) \u2013 The channel to associate the buffers with. samples ( int ) \u2013 Number of samples to allocate. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: AGGREGATE ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer. buffers ( ndarray | None , default: None ) \u2013 Send preallocated 2D numpy buffers to be populated. Min buffer first, followed by max buffer. If left as None, this function creates its own buffers. Returns: tuple [ ndarray , ndarray ] \u2013 tuple[np.ndarray, np.ndarray]: Tuple of (buffer_min, buffer_max) NumPy arrays. Raises: PicoSDKException \u2013 If an unsupported data type is provided. set_data_buffers_rapid_capture(channel, samples, captures, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, action=ACTION.CLEAR_ALL | ACTION.ADD) Allocate and assign max and min NumPy-backed data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"Memory / Buffer Management"},{"location":"ref/ps6000a/buffers/#memory-buffer-management","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_maximum_available_memory Return the maximum sample depth for the current resolution. memory_segments Configure the number of memory segments. memory_segments_by_samples Set the samples per memory segment. set_data_buffer Allocates and assigns a data buffer for a specified channel on the 6000A series. set_data_buffer_for_enabled_channels Sets data buffers for enabled channels set by picosdk.set_channel() set_data_buffer_rapid_capture Allocates and assigns multiple data buffers for rapid block capture on a specified channel. set_data_buffers Allocate and assign max and min NumPy-backed data buffers. set_data_buffers_rapid_capture Allocate and assign max and min NumPy-backed data buffers for rapid block","title":"Memory / Buffer Management"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.get_maximum_available_memory","text":"Return the maximum sample depth for the current resolution. Wraps ps6000aGetMaximumAvailableMemory to query how many samples can be captured at self.resolution . Returns: int: Maximum number of samples supported. Raises: PicoSDKException: If the device has not been opened.","title":"get_maximum_available_memory"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.memory_segments","text":"Configure the number of memory segments. This wraps the ps6000aMemorySegments API call. Parameters: n_segments ( int ) \u2013 Desired number of memory segments. Returns: int ( int ) \u2013 Number of samples available in each segment.","title":"memory_segments"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.memory_segments_by_samples","text":"Set the samples per memory segment. This wraps ps6000aMemorySegmentsBySamples which divides the capture memory so that each segment holds n_samples samples. Parameters: n_samples ( int ) \u2013 Number of samples per segment. Returns: int ( int ) \u2013 Number of segments the memory was divided into.","title":"memory_segments_by_samples"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.set_data_buffer","text":"Allocates and assigns a data buffer for a specified channel on the 6000A series. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). buffer ( ndarray | None , default: None ) \u2013 Send a preallocated numpy buffer to be populated. If left as None, this function creates its own buffer. Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffer"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.set_data_buffer_for_enabled_channels","text":"Sets data buffers for enabled channels set by picosdk.set_channel() Parameters: samples ( int ) \u2013 The sample buffer or size to allocate. segment ( int , default: 0 ) \u2013 The memory segment index. datatype ( DATA_TYPE , default: INT16_T ) \u2013 The data type used for the buffer. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 The ratio mode (e.g., RAW, AVERAGE). clear_buffer ( bool , default: True ) \u2013 If True, clear the buffer first captures ( int , default: 0 ) \u2013 If larger than 0, it will create multiple buffers for RAPID mode. Returns: dict ( dict ) \u2013 A dictionary mapping each channel to its associated data buffer.","title":"set_data_buffer_for_enabled_channels"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.set_data_buffer_rapid_capture","text":"Allocates and assigns multiple data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffer_rapid_capture"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.set_data_buffers","text":"Allocate and assign max and min NumPy-backed data buffers. Parameters: channel ( int ) \u2013 The channel to associate the buffers with. samples ( int ) \u2013 Number of samples to allocate. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: AGGREGATE ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer. buffers ( ndarray | None , default: None ) \u2013 Send preallocated 2D numpy buffers to be populated. Min buffer first, followed by max buffer. If left as None, this function creates its own buffers. Returns: tuple [ ndarray , ndarray ] \u2013 tuple[np.ndarray, np.ndarray]: Tuple of (buffer_min, buffer_max) NumPy arrays. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffers"},{"location":"ref/ps6000a/buffers/#pypicosdk.pypicosdk.ps6000a.set_data_buffers_rapid_capture","text":"Allocate and assign max and min NumPy-backed data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffers_rapid_capture"},{"location":"ref/ps6000a/captures/","text":"Capture Configuration Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_no_of_captures Return the number of captures configured for rapid block. get_no_of_processed_captures Return the number of captures processed in rapid block mode. set_no_of_captures Configure the number of captures for rapid block mode. get_no_of_captures() Return the number of captures configured for rapid block. get_no_of_processed_captures() Return the number of captures processed in rapid block mode. set_no_of_captures(n_captures) Configure the number of captures for rapid block mode.","title":"Capture Configuration"},{"location":"ref/ps6000a/captures/#capture-configuration","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_no_of_captures Return the number of captures configured for rapid block. get_no_of_processed_captures Return the number of captures processed in rapid block mode. set_no_of_captures Configure the number of captures for rapid block mode.","title":"Capture Configuration"},{"location":"ref/ps6000a/captures/#pypicosdk.pypicosdk.ps6000a.get_no_of_captures","text":"Return the number of captures configured for rapid block.","title":"get_no_of_captures"},{"location":"ref/ps6000a/captures/#pypicosdk.pypicosdk.ps6000a.get_no_of_processed_captures","text":"Return the number of captures processed in rapid block mode.","title":"get_no_of_processed_captures"},{"location":"ref/ps6000a/captures/#pypicosdk.pypicosdk.ps6000a.set_no_of_captures","text":"Configure the number of captures for rapid block mode.","title":"set_no_of_captures"},{"location":"ref/ps6000a/channel/","text":"Channel Configuration Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_accessory_info Return accessory details for the given channel. get_adc_limits Gets the ADC limits for specified devices. get_analogue_offset_limits Get the allowed analogue offset range for range and coupling . get_channel_combinations Return valid channel flag combinations for a proposed timebase. report_all_channels_overvoltage_trip_status Return the overvoltage trip status for each channel. reset_channels_and_report_all_channels_overvoltage_trip_status Reset channels and return overvoltage trip status for each. set_all_channels_off Turns all channels off, based on unit number of channels set_channel Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. set_channel_off Sets a channel to OFF (6000E) set_channel_on Enable and configure a specific channel on the device with given parameters. get_accessory_info(channel, info) Return accessory details for the given channel. This wraps the driver GetAccessoryInfo call which retrieves information about any accessory attached to channel . Args: channel: Channel the accessory is connected to. info: Information field requested from :class: UNIT_INFO . Returns: str: Information string provided by the driver. get_adc_limits() Gets the ADC limits for specified devices. Currently tested on: 6000a. Returns: tuple ( tuple ) \u2013 (minimum value, maximum value) Raises: PicoSDKException \u2013 If device hasn't been initialized. get_analogue_offset_limits(range, coupling) Get the allowed analogue offset range for range and coupling . get_channel_combinations(timebase) Return valid channel flag combinations for a proposed timebase. This wraps ps6000aChannelCombinationsStateless and requires the device to be opened first. Args: timebase: Proposed timebase value to test. Returns: list[int]: Sequence of bit masks using :class: PICO_CHANNEL_FLAGS . Raises: PicoSDKException: If the device has not been opened. report_all_channels_overvoltage_trip_status() Return the overvoltage trip status for each channel. This wraps ps6000aReportAllChannelsOvervoltageTripStatus to query whether any channel's 50 \u03a9 input protection has tripped. Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels. reset_channels_and_report_all_channels_overvoltage_trip_status() Reset channels and return overvoltage trip status for each. Wraps ps6000aResetChannelsAndReportAllChannelsOvervoltageTripStatus . Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels. set_all_channels_off() Turns all channels off, based on unit number of channels set_channel(channel, range=RANGE.V1, enabled=True, coupling=COUPLING.DC, offset=0.0, bandwidth=BANDWIDTH_CH.FULL, probe_scale=1.0) Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. For the ps6000a drivers, this combines set_channel_on/off to a single function. Set channel on/off by adding enabled=True/False Parameters: channel ( CHANNEL ) \u2013 Channel to setup. range ( RANGE , default: V1 ) \u2013 Voltage range of channel. enabled ( bool , default: True ) \u2013 Enable or disable channel. coupling ( COUPLING , default: DC ) \u2013 AC/DC/DC 50 Ohm coupling of selected channel. offset ( int , default: 0.0 ) \u2013 Analog offset in volts (V) of selected channel. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth of channel (selected models). probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1). set_channel_off(channel) Sets a channel to OFF (6000E) set_channel_on(channel, range, coupling=COUPLING.DC, offset=0.0, bandwidth=BANDWIDTH_CH.FULL, probe_scale=1.0) Enable and configure a specific channel on the device with given parameters. Parameters: channel ( CHANNEL ) \u2013 The channel to enable (e.g., CHANNEL.A, CHANNEL.B). range ( RANGE ) \u2013 The input voltage range to set for the channel. coupling ( COUPLING , default: DC ) \u2013 The coupling mode to use (e.g., DC, AC). Defaults to DC. offset ( float , default: 0.0 ) \u2013 DC offset to apply to the channel input, in volts. Defaults to 0. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth limit setting for the channel. Defaults to full bandwidth. probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1).","title":"Channel Configuration"},{"location":"ref/ps6000a/channel/#channel-configuration","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_accessory_info Return accessory details for the given channel. get_adc_limits Gets the ADC limits for specified devices. get_analogue_offset_limits Get the allowed analogue offset range for range and coupling . get_channel_combinations Return valid channel flag combinations for a proposed timebase. report_all_channels_overvoltage_trip_status Return the overvoltage trip status for each channel. reset_channels_and_report_all_channels_overvoltage_trip_status Reset channels and return overvoltage trip status for each. set_all_channels_off Turns all channels off, based on unit number of channels set_channel Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. set_channel_off Sets a channel to OFF (6000E) set_channel_on Enable and configure a specific channel on the device with given parameters.","title":"Channel Configuration"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.get_accessory_info","text":"Return accessory details for the given channel. This wraps the driver GetAccessoryInfo call which retrieves information about any accessory attached to channel . Args: channel: Channel the accessory is connected to. info: Information field requested from :class: UNIT_INFO . Returns: str: Information string provided by the driver.","title":"get_accessory_info"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.get_adc_limits","text":"Gets the ADC limits for specified devices. Currently tested on: 6000a. Returns: tuple ( tuple ) \u2013 (minimum value, maximum value) Raises: PicoSDKException \u2013 If device hasn't been initialized.","title":"get_adc_limits"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.get_analogue_offset_limits","text":"Get the allowed analogue offset range for range and coupling .","title":"get_analogue_offset_limits"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.get_channel_combinations","text":"Return valid channel flag combinations for a proposed timebase. This wraps ps6000aChannelCombinationsStateless and requires the device to be opened first. Args: timebase: Proposed timebase value to test. Returns: list[int]: Sequence of bit masks using :class: PICO_CHANNEL_FLAGS . Raises: PicoSDKException: If the device has not been opened.","title":"get_channel_combinations"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.report_all_channels_overvoltage_trip_status","text":"Return the overvoltage trip status for each channel. This wraps ps6000aReportAllChannelsOvervoltageTripStatus to query whether any channel's 50 \u03a9 input protection has tripped. Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels.","title":"report_all_channels_overvoltage_trip_status"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.reset_channels_and_report_all_channels_overvoltage_trip_status","text":"Reset channels and return overvoltage trip status for each. Wraps ps6000aResetChannelsAndReportAllChannelsOvervoltageTripStatus . Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels.","title":"reset_channels_and_report_all_channels_overvoltage_trip_status"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.set_all_channels_off","text":"Turns all channels off, based on unit number of channels","title":"set_all_channels_off"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.set_channel","text":"Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. For the ps6000a drivers, this combines set_channel_on/off to a single function. Set channel on/off by adding enabled=True/False Parameters: channel ( CHANNEL ) \u2013 Channel to setup. range ( RANGE , default: V1 ) \u2013 Voltage range of channel. enabled ( bool , default: True ) \u2013 Enable or disable channel. coupling ( COUPLING , default: DC ) \u2013 AC/DC/DC 50 Ohm coupling of selected channel. offset ( int , default: 0.0 ) \u2013 Analog offset in volts (V) of selected channel. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth of channel (selected models). probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1).","title":"set_channel"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.set_channel_off","text":"Sets a channel to OFF (6000E)","title":"set_channel_off"},{"location":"ref/ps6000a/channel/#pypicosdk.pypicosdk.ps6000a.set_channel_on","text":"Enable and configure a specific channel on the device with given parameters. Parameters: channel ( CHANNEL ) \u2013 The channel to enable (e.g., CHANNEL.A, CHANNEL.B). range ( RANGE ) \u2013 The input voltage range to set for the channel. coupling ( COUPLING , default: DC ) \u2013 The coupling mode to use (e.g., DC, AC). Defaults to DC. offset ( float , default: 0.0 ) \u2013 DC offset to apply to the channel input, in volts. Defaults to 0. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth limit setting for the channel. Defaults to full bandwidth. probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1).","title":"set_channel_on"},{"location":"ref/ps6000a/conversions/","text":"Built-in Conversions These functions are general functions to convert data to another format. This is particularly useful for converting ADC data to mV or calculating the needed timebase for your PicoScope. As the conversions talk to the PicoScope to retrieve the resolution and ADC limits, the PicoScope needs to be initialized using scope.open_unit() followed by the conversion. Example >>> import pypicosdk as psdk >>> scope = psdk.ps6000a() >>> scope.open_unit(resolution=psdk.RESOLUTION._8BIT) >>> scope.mv_to_adc(100, channel=psdk.CHANNEL.A) 3251 >>> scope.close_unit() Reference Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description adc_to_mv Converts ADC values into millivolt (mV) values. adc_to_volts Converts ADC values into voltage (V) values. interval_to_timebase Converts a time interval (between samples) into a PicoScope timebase mv_to_adc Converts a millivolt (mV) value to an ADC value based on the device's sample_rate_to_timebase Converts sample rate to a PicoScope timebase value based on the volts_to_adc Coverts a volt (V) value to an ADC value based on the channel range and device's maximum adc_to_mv(data, channel=None) Converts ADC values into millivolt (mV) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into millivolts (mV) adc_to_volts(data, channel=None) Converts ADC values into voltage (V) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into volts (V) interval_to_timebase(interval, unit=TIME_UNIT.S) Converts a time interval (between samples) into a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: interval ( float ) \u2013 Desired time interval between samples unit ( TIME_UNIT , default: S ) \u2013 Time unit of interval. mv_to_adc(mv, channel) Converts a millivolt (mV) value to an ADC value based on the device's maximum ADC range. Parameters: mv ( float ) \u2013 Voltage in millivolts (mV) to be converted. channel ( CHANNEL ) \u2013 Channel associated with mv . The probe scaling for the channel will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input millivolt value. sample_rate_to_timebase(sample_rate, unit=SAMPLE_RATE.MSPS) Converts sample rate to a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: sample_rate ( int ) \u2013 Desired sample rate unit ( SAMPLE_RATE , default: MSPS ) \u2013 unit of sample rate. volts_to_adc(volts, channel) Coverts a volt (V) value to an ADC value based on the channel range and device's maximum ADC value. Parameters: volts ( float ) \u2013 Voltage in volts (V) to be converted channel ( CHANNEL ) \u2013 Channel associated with volts . The probe scaling will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input voltage.","title":"Built-in Conversions"},{"location":"ref/ps6000a/conversions/#built-in-conversions","text":"These functions are general functions to convert data to another format. This is particularly useful for converting ADC data to mV or calculating the needed timebase for your PicoScope. As the conversions talk to the PicoScope to retrieve the resolution and ADC limits, the PicoScope needs to be initialized using scope.open_unit() followed by the conversion.","title":"Built-in Conversions"},{"location":"ref/ps6000a/conversions/#example","text":">>> import pypicosdk as psdk >>> scope = psdk.ps6000a() >>> scope.open_unit(resolution=psdk.RESOLUTION._8BIT) >>> scope.mv_to_adc(100, channel=psdk.CHANNEL.A) 3251 >>> scope.close_unit()","title":"Example"},{"location":"ref/ps6000a/conversions/#reference","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description adc_to_mv Converts ADC values into millivolt (mV) values. adc_to_volts Converts ADC values into voltage (V) values. interval_to_timebase Converts a time interval (between samples) into a PicoScope timebase mv_to_adc Converts a millivolt (mV) value to an ADC value based on the device's sample_rate_to_timebase Converts sample rate to a PicoScope timebase value based on the volts_to_adc Coverts a volt (V) value to an ADC value based on the channel range and device's maximum","title":"Reference"},{"location":"ref/ps6000a/conversions/#pypicosdk.pypicosdk.ps6000a.adc_to_mv","text":"Converts ADC values into millivolt (mV) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into millivolts (mV)","title":"adc_to_mv"},{"location":"ref/ps6000a/conversions/#pypicosdk.pypicosdk.ps6000a.adc_to_volts","text":"Converts ADC values into voltage (V) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into volts (V)","title":"adc_to_volts"},{"location":"ref/ps6000a/conversions/#pypicosdk.pypicosdk.ps6000a.interval_to_timebase","text":"Converts a time interval (between samples) into a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: interval ( float ) \u2013 Desired time interval between samples unit ( TIME_UNIT , default: S ) \u2013 Time unit of interval.","title":"interval_to_timebase"},{"location":"ref/ps6000a/conversions/#pypicosdk.pypicosdk.ps6000a.mv_to_adc","text":"Converts a millivolt (mV) value to an ADC value based on the device's maximum ADC range. Parameters: mv ( float ) \u2013 Voltage in millivolts (mV) to be converted. channel ( CHANNEL ) \u2013 Channel associated with mv . The probe scaling for the channel will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input millivolt value.","title":"mv_to_adc"},{"location":"ref/ps6000a/conversions/#pypicosdk.pypicosdk.ps6000a.sample_rate_to_timebase","text":"Converts sample rate to a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: sample_rate ( int ) \u2013 Desired sample rate unit ( SAMPLE_RATE , default: MSPS ) \u2013 unit of sample rate.","title":"sample_rate_to_timebase"},{"location":"ref/ps6000a/conversions/#pypicosdk.pypicosdk.ps6000a.volts_to_adc","text":"Coverts a volt (V) value to an ADC value based on the channel range and device's maximum ADC value. Parameters: volts ( float ) \u2013 Voltage in volts (V) to be converted channel ( CHANNEL ) \u2013 Channel associated with volts . The probe scaling will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input voltage.","title":"volts_to_adc"},{"location":"ref/ps6000a/digital/","text":"Digital Port Control Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description set_digital_port_off Disable a digital port using ps6000aSetDigitalPortOff . set_digital_port_on Enable a digital port using ps6000aSetDigitalPortOn . set_pulse_width_digital_port_properties Configure digital port properties for pulse-width triggering. set_digital_port_off(port) Disable a digital port using ps6000aSetDigitalPortOff . set_digital_port_on(port, logic_threshold_level, hysteresis) Enable a digital port using ps6000aSetDigitalPortOn . Parameters: port ( DIGITAL_PORT ) \u2013 Digital port to enable. logic_threshold_level ( list [ int ] ) \u2013 Threshold level for each pin in millivolts. hysteresis ( DIGITAL_PORT_HYSTERESIS ) \u2013 Hysteresis level applied to all pins. set_pulse_width_digital_port_properties(port, directions) Configure digital port properties for pulse-width triggering. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration.","title":"Digital Port Control"},{"location":"ref/ps6000a/digital/#digital-port-control","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description set_digital_port_off Disable a digital port using ps6000aSetDigitalPortOff . set_digital_port_on Enable a digital port using ps6000aSetDigitalPortOn . set_pulse_width_digital_port_properties Configure digital port properties for pulse-width triggering.","title":"Digital Port Control"},{"location":"ref/ps6000a/digital/#pypicosdk.pypicosdk.ps6000a.set_digital_port_off","text":"Disable a digital port using ps6000aSetDigitalPortOff .","title":"set_digital_port_off"},{"location":"ref/ps6000a/digital/#pypicosdk.pypicosdk.ps6000a.set_digital_port_on","text":"Enable a digital port using ps6000aSetDigitalPortOn . Parameters: port ( DIGITAL_PORT ) \u2013 Digital port to enable. logic_threshold_level ( list [ int ] ) \u2013 Threshold level for each pin in millivolts. hysteresis ( DIGITAL_PORT_HYSTERESIS ) \u2013 Hysteresis level applied to all pins.","title":"set_digital_port_on"},{"location":"ref/ps6000a/digital/#pypicosdk.pypicosdk.ps6000a.set_pulse_width_digital_port_properties","text":"Configure digital port properties for pulse-width triggering. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration.","title":"set_pulse_width_digital_port_properties"},{"location":"ref/ps6000a/firmware/","text":"Firmware / Updates Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description check_for_update Query whether a firmware update is available for the device. start_firmware_update Begin installing any available firmware update. check_for_update(n_infos=8) Query whether a firmware update is available for the device. Args: n_infos: Size of the firmware information buffer. Returns: tuple[list, bool]: (firmware_info, updates_required) where firmware_info is a list of :class: PICO_FIRMWARE_INFO structures and updates_required indicates whether any firmware components require updating. start_firmware_update(progress=None) Begin installing any available firmware update. Args: progress: Optional callback (handle, percent) that receives progress updates as the firmware is written.","title":"Firmware / Updates"},{"location":"ref/ps6000a/firmware/#firmware-updates","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description check_for_update Query whether a firmware update is available for the device. start_firmware_update Begin installing any available firmware update.","title":"Firmware / Updates"},{"location":"ref/ps6000a/firmware/#pypicosdk.pypicosdk.ps6000a.check_for_update","text":"Query whether a firmware update is available for the device. Args: n_infos: Size of the firmware information buffer. Returns: tuple[list, bool]: (firmware_info, updates_required) where firmware_info is a list of :class: PICO_FIRMWARE_INFO structures and updates_required indicates whether any firmware components require updating.","title":"check_for_update"},{"location":"ref/ps6000a/firmware/#pypicosdk.pypicosdk.ps6000a.start_firmware_update","text":"Begin installing any available firmware update. Args: progress: Optional callback (handle, percent) that receives progress updates as the firmware is written.","title":"start_firmware_update"},{"location":"ref/ps6000a/init/","text":"Initializing ps6000a Setup The ps6000a drivers are intended for PicoScope 6000E Series. Quickstart Code To get started, use the following code: import pypicosdk as psdk scope = psdk.ps6000a() scope.open_unit() # Print scope serial (Optional) print(scope.get_unit_serial()) # Do something here scope.close_unit() Troubleshooting 6000E needs USB and an external power supply to function fully. USB on its own will not initiate the USB driver.","title":"Initializing ps6000a"},{"location":"ref/ps6000a/init/#initializing-ps6000a","text":"","title":"Initializing ps6000a"},{"location":"ref/ps6000a/init/#setup","text":"The ps6000a drivers are intended for PicoScope 6000E Series.","title":"Setup"},{"location":"ref/ps6000a/init/#quickstart-code","text":"To get started, use the following code: import pypicosdk as psdk scope = psdk.ps6000a() scope.open_unit() # Print scope serial (Optional) print(scope.get_unit_serial()) # Do something here scope.close_unit()","title":"Quickstart Code"},{"location":"ref/ps6000a/init/#troubleshooting","text":"6000E needs USB and an external power supply to function fully. USB on its own will not initiate the USB driver.","title":"Troubleshooting"},{"location":"ref/ps6000a/retrieval/","text":"Data Retrieval Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_time_axis Return an array of time values based on the timebase and number get_values Retrieves a block of captured samples from the device once it's ready. get_values_bulk Retrieve data from multiple memory segments. get_values_bulk_async Begin asynchronous retrieval of values from multiple segments. get_values_overlapped Retrieve overlapped data from multiple segments for block or rapid block mode. is_over_range Logs and prints a warning if any channel has been over range. is_ready Blocks execution until the PicoScope device is ready. no_of_streaming_values Return the number of values currently available while streaming. stop_using_get_values_overlapped Terminate overlapped capture mode. get_time_axis(timebase, samples, pre_trig_percent=None, unit='ns', ratio=0) Return an array of time values based on the timebase and number of samples Parameters: timebase ( int ) \u2013 PicoScope timebase samples ( int ) \u2013 Number of samples captured pre_trig_percent ( int , default: None ) \u2013 Percent to offset the 0 point by. If None, defaults to last used pre_trig_percent or 50. unit ( str , default: 'ns' ) \u2013 Unit of seconds the time axis is returned in. Default is 'ns' (nanoseconds). ratio ( int , default: 0 ) \u2013 If using a downsampling ratio, this will scale the time interval to reflect the reduced samples. Returns: ndarray \u2013 np.ndarray: Array of time values in nano-seconds get_values(samples, start_index=0, segment=0, ratio=0, ratio_mode=RATIO_MODE.RAW) Retrieves a block of captured samples from the device once it's ready. If a channel goes over-range a warning will appear. This function should be called after confirming the device is ready using is_ready() . It invokes the underlying PicoSDK GetValues function to read the data into memory. Parameters: samples ( int ) \u2013 Number of samples to retrieve. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. segment ( int , default: 0 ) \u2013 Memory segment index to retrieve data from. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Ratio mode for downsampling. Returns: int ( int ) \u2013 Actual number of samples retrieved. get_values_bulk(start_index, no_of_samples, from_segment_index, to_segment_index, down_sample_ratio, down_sample_ratio_mode) Retrieve data from multiple memory segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Total number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment. If this value is less than from_segment_index the driver wraps around. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . Returns: int \u2013 tuple[int, list[list[str]]]: (samples, overflow)list) where samples is the list [ list [ str ]] \u2013 number of samples copied and overflow is list of captures with where tuple [ int , list [ list [ str ]]] \u2013 channnels have exceeded their voltage range. get_values_bulk_async(start_index, no_of_samples, from_segment_index, to_segment_index, down_sample_ratio, down_sample_ratio_mode, lp_data_ready, p_parameter) Begin asynchronous retrieval of values from multiple segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment in the range. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . lp_data_ready ( POINTER ) \u2013 Callback invoked when data is available. The callback signature should be callback(handle, status, n_samples, overflow) . p_parameter ( POINTER ) \u2013 User parameter passed through to lp_data_ready . get_values_overlapped(start_index, no_of_samples, down_sample_ratio, down_sample_ratio_mode, from_segment_index, to_segment_index, overflow) Retrieve overlapped data from multiple segments for block or rapid block mode. Call this method before :meth: run_block_capture to defer the data retrieval request. The driver validates and performs the request when :meth: run_block_capture runs, which avoids the extra communication that occurs when calling :meth: run_block_capture followed by :meth: get_values . After the capture completes you can call :meth: get_values again to retrieve additional copies of the data. Stop further captures with :meth: stop_using_get_values_overlapped and check progress using :meth: ps6000a.PicoScope.get_no_of_processed_captures . Parameters: start_index ( int ) \u2013 Index within the circular buffer to begin reading from. no_of_samples ( int ) \u2013 Number of samples to copy from each segment. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . from_segment_index ( int ) \u2013 First segment index to read. to_segment_index ( int ) \u2013 Last segment index to read. overflow ( c_int16 ) \u2013 ctypes.c_int16 instance that receives any overflow flags. Returns: int ( int ) \u2013 Actual number of samples copied from each segment. Examples: >>> samples = scope.get_values_overlapped( ... start_index=0, # read from start of buffer ... no_of_samples=1024, # copy 1024 samples ... down_sample_ratio=1, # no downsampling ... down_sample_ratio_mode=RATIO_MODE.RAW, ... from_segment_index=0, # first segment only ... to_segment_index=0, ... ) >>> scope.run_block_capture(timebase=1, samples=1024) >>> data = scope.get_values(samples=1024) >>> samples, scope.over_range (1024, 0) is_over_range() Logs and prints a warning if any channel has been over range. The :attr: over_range attribute stores a bit mask updated by data retrieval methods like :meth: get_values and :meth: get_values_overlapped . Calling this method logs a warning if any channel went over range and returns a list of the affected channel names. Returns: list ( list ) \u2013 List of channels that have been over range is_ready() Blocks execution until the PicoScope device is ready. Continuously calls the PicoSDK IsReady function in a loop, checking if the device is prepared to proceed with data acquisition. Returns: None \u2013 None no_of_streaming_values() Return the number of values currently available while streaming. stop_using_get_values_overlapped() Terminate overlapped capture mode. Call this when overlapped captures are complete to release any resources allocated by :meth: get_values_overlapped .","title":"Data Retrieval"},{"location":"ref/ps6000a/retrieval/#data-retrieval","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_time_axis Return an array of time values based on the timebase and number get_values Retrieves a block of captured samples from the device once it's ready. get_values_bulk Retrieve data from multiple memory segments. get_values_bulk_async Begin asynchronous retrieval of values from multiple segments. get_values_overlapped Retrieve overlapped data from multiple segments for block or rapid block mode. is_over_range Logs and prints a warning if any channel has been over range. is_ready Blocks execution until the PicoScope device is ready. no_of_streaming_values Return the number of values currently available while streaming. stop_using_get_values_overlapped Terminate overlapped capture mode.","title":"Data Retrieval"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.get_time_axis","text":"Return an array of time values based on the timebase and number of samples Parameters: timebase ( int ) \u2013 PicoScope timebase samples ( int ) \u2013 Number of samples captured pre_trig_percent ( int , default: None ) \u2013 Percent to offset the 0 point by. If None, defaults to last used pre_trig_percent or 50. unit ( str , default: 'ns' ) \u2013 Unit of seconds the time axis is returned in. Default is 'ns' (nanoseconds). ratio ( int , default: 0 ) \u2013 If using a downsampling ratio, this will scale the time interval to reflect the reduced samples. Returns: ndarray \u2013 np.ndarray: Array of time values in nano-seconds","title":"get_time_axis"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.get_values","text":"Retrieves a block of captured samples from the device once it's ready. If a channel goes over-range a warning will appear. This function should be called after confirming the device is ready using is_ready() . It invokes the underlying PicoSDK GetValues function to read the data into memory. Parameters: samples ( int ) \u2013 Number of samples to retrieve. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. segment ( int , default: 0 ) \u2013 Memory segment index to retrieve data from. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Ratio mode for downsampling. Returns: int ( int ) \u2013 Actual number of samples retrieved.","title":"get_values"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.get_values_bulk","text":"Retrieve data from multiple memory segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Total number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment. If this value is less than from_segment_index the driver wraps around. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . Returns: int \u2013 tuple[int, list[list[str]]]: (samples, overflow)list) where samples is the list [ list [ str ]] \u2013 number of samples copied and overflow is list of captures with where tuple [ int , list [ list [ str ]]] \u2013 channnels have exceeded their voltage range.","title":"get_values_bulk"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.get_values_bulk_async","text":"Begin asynchronous retrieval of values from multiple segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment in the range. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . lp_data_ready ( POINTER ) \u2013 Callback invoked when data is available. The callback signature should be callback(handle, status, n_samples, overflow) . p_parameter ( POINTER ) \u2013 User parameter passed through to lp_data_ready .","title":"get_values_bulk_async"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.get_values_overlapped","text":"Retrieve overlapped data from multiple segments for block or rapid block mode. Call this method before :meth: run_block_capture to defer the data retrieval request. The driver validates and performs the request when :meth: run_block_capture runs, which avoids the extra communication that occurs when calling :meth: run_block_capture followed by :meth: get_values . After the capture completes you can call :meth: get_values again to retrieve additional copies of the data. Stop further captures with :meth: stop_using_get_values_overlapped and check progress using :meth: ps6000a.PicoScope.get_no_of_processed_captures . Parameters: start_index ( int ) \u2013 Index within the circular buffer to begin reading from. no_of_samples ( int ) \u2013 Number of samples to copy from each segment. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . from_segment_index ( int ) \u2013 First segment index to read. to_segment_index ( int ) \u2013 Last segment index to read. overflow ( c_int16 ) \u2013 ctypes.c_int16 instance that receives any overflow flags. Returns: int ( int ) \u2013 Actual number of samples copied from each segment. Examples: >>> samples = scope.get_values_overlapped( ... start_index=0, # read from start of buffer ... no_of_samples=1024, # copy 1024 samples ... down_sample_ratio=1, # no downsampling ... down_sample_ratio_mode=RATIO_MODE.RAW, ... from_segment_index=0, # first segment only ... to_segment_index=0, ... ) >>> scope.run_block_capture(timebase=1, samples=1024) >>> data = scope.get_values(samples=1024) >>> samples, scope.over_range (1024, 0)","title":"get_values_overlapped"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.is_over_range","text":"Logs and prints a warning if any channel has been over range. The :attr: over_range attribute stores a bit mask updated by data retrieval methods like :meth: get_values and :meth: get_values_overlapped . Calling this method logs a warning if any channel went over range and returns a list of the affected channel names. Returns: list ( list ) \u2013 List of channels that have been over range","title":"is_over_range"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.is_ready","text":"Blocks execution until the PicoScope device is ready. Continuously calls the PicoSDK IsReady function in a loop, checking if the device is prepared to proceed with data acquisition. Returns: None \u2013 None","title":"is_ready"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.no_of_streaming_values","text":"Return the number of values currently available while streaming.","title":"no_of_streaming_values"},{"location":"ref/ps6000a/retrieval/#pypicosdk.pypicosdk.ps6000a.stop_using_get_values_overlapped","text":"Terminate overlapped capture mode. Call this when overlapped captures are complete to release any resources allocated by :meth: get_values_overlapped .","title":"stop_using_get_values_overlapped"},{"location":"ref/ps6000a/run/","text":"Data Acquisition: Block & Streaming Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description run_block_capture Runs a block capture using the specified timebase and number of samples. run_simple_block_capture Perform a complete single block capture. run_simple_rapid_block_capture Run a rapid block capture with X amount of captures/frames/waveforms run_streaming Begin a streaming capture. stop Stop data acquisition on the device. run_block_capture(timebase, samples, pre_trig_percent=None, segment=0) Runs a block capture using the specified timebase and number of samples. This sets up the PicoScope to begin collecting a block of data, divided into pre-trigger and post-trigger samples. It uses the PicoSDK RunBlock function. Parameters: timebase ( int ) \u2013 Timebase value determining sample interval (refer to PicoSDK guide). samples ( int ) \u2013 Total number of samples to capture. pre_trig_percent ( int | None , default: None ) \u2013 Percentage of samples to capture before the trigger. If None, defaults to last called pre_trig_percent or 50. segment ( int , default: 0 ) \u2013 Memory segment index to use. Returns: int ( int ) \u2013 Estimated time (in milliseconds) the device will be busy capturing data. run_simple_block_capture(timebase, samples, segment=0, start_index=0, datatype=cst.DATA_TYPE.INT16_T, output_unit='mv', time_unit='ns', ratio=0, ratio_mode=cst.RATIO_MODE.RAW, pre_trig_percent=50) Perform a complete single block capture. Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. segment ( int , default: 0 ) \u2013 Memory segment index to use. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: dict [ int , ndarray ] \u2013 tuple[dict[int,np.ndarray],np.ndarray]: Dictionary of channel buffers and the ndarray \u2013 time axis (numpy array). Examples: >>> scope.set_channel(CHANNEL.A, RANGE.V1) >>> scope.set_simple_trigger(CHANNEL.A, threshold_mv=500) >>> buffers = scope.run_simple_block_capture(timebase=3, samples=1000) run_simple_rapid_block_capture(timebase, samples, captures, start_index=0, datatype=cst.DATA_TYPE.INT16_T, output_unit='mv', time_unit='ns', ratio=0, ratio_mode=cst.RATIO_MODE.RAW, pre_trig_percent=50) Run a rapid block capture with X amount of captures/frames/waveforms Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. captures ( int ) \u2013 Number of waveforms to capture. start_index ( int , default: 0 ) \u2013 Starting index in buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: tuple [ dict [ int , ndarray ], ndarray ] \u2013 tuple[dict,np.ndarray]: Dictionary of channel buffers and the time axis (numpy array). run_streaming(sample_interval, time_units, max_pre_trigger_samples, max_post_trigger_samples, auto_stop, ratio, ratio_mode) Begin a streaming capture. This wraps the RunStreaming driver call and configures the acquisition according to the provided arguments. Args: sample_interval: Requested interval between samples. time_units: Unit for sample_interval . max_pre_trigger_samples: Number of pre-trigger samples to collect. max_post_trigger_samples: Number of post-trigger samples to collect. auto_stop: Whether the driver should stop when the buffer is full. ratio: Down sampling ratio. ratio_mode: Down sampling mode. Returns: float: The actual sample interval configured by the driver. stop() Stop data acquisition on the device. Returns: None \u2013 None","title":"Data Acquisition: Block &amp; Streaming"},{"location":"ref/ps6000a/run/#data-acquisition-block-streaming","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description run_block_capture Runs a block capture using the specified timebase and number of samples. run_simple_block_capture Perform a complete single block capture. run_simple_rapid_block_capture Run a rapid block capture with X amount of captures/frames/waveforms run_streaming Begin a streaming capture. stop Stop data acquisition on the device.","title":"Data Acquisition: Block &amp; Streaming"},{"location":"ref/ps6000a/run/#pypicosdk.pypicosdk.ps6000a.run_block_capture","text":"Runs a block capture using the specified timebase and number of samples. This sets up the PicoScope to begin collecting a block of data, divided into pre-trigger and post-trigger samples. It uses the PicoSDK RunBlock function. Parameters: timebase ( int ) \u2013 Timebase value determining sample interval (refer to PicoSDK guide). samples ( int ) \u2013 Total number of samples to capture. pre_trig_percent ( int | None , default: None ) \u2013 Percentage of samples to capture before the trigger. If None, defaults to last called pre_trig_percent or 50. segment ( int , default: 0 ) \u2013 Memory segment index to use. Returns: int ( int ) \u2013 Estimated time (in milliseconds) the device will be busy capturing data.","title":"run_block_capture"},{"location":"ref/ps6000a/run/#pypicosdk.pypicosdk.ps6000a.run_simple_block_capture","text":"Perform a complete single block capture. Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. segment ( int , default: 0 ) \u2013 Memory segment index to use. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: dict [ int , ndarray ] \u2013 tuple[dict[int,np.ndarray],np.ndarray]: Dictionary of channel buffers and the ndarray \u2013 time axis (numpy array). Examples: >>> scope.set_channel(CHANNEL.A, RANGE.V1) >>> scope.set_simple_trigger(CHANNEL.A, threshold_mv=500) >>> buffers = scope.run_simple_block_capture(timebase=3, samples=1000)","title":"run_simple_block_capture"},{"location":"ref/ps6000a/run/#pypicosdk.pypicosdk.ps6000a.run_simple_rapid_block_capture","text":"Run a rapid block capture with X amount of captures/frames/waveforms Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. captures ( int ) \u2013 Number of waveforms to capture. start_index ( int , default: 0 ) \u2013 Starting index in buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: tuple [ dict [ int , ndarray ], ndarray ] \u2013 tuple[dict,np.ndarray]: Dictionary of channel buffers and the time axis (numpy array).","title":"run_simple_rapid_block_capture"},{"location":"ref/ps6000a/run/#pypicosdk.pypicosdk.ps6000a.run_streaming","text":"Begin a streaming capture. This wraps the RunStreaming driver call and configures the acquisition according to the provided arguments. Args: sample_interval: Requested interval between samples. time_units: Unit for sample_interval . max_pre_trigger_samples: Number of pre-trigger samples to collect. max_post_trigger_samples: Number of post-trigger samples to collect. auto_stop: Whether the driver should stop when the buffer is full. ratio: Down sampling ratio. ratio_mode: Down sampling mode. Returns: float: The actual sample interval configured by the driver.","title":"run_streaming"},{"location":"ref/ps6000a/run/#pypicosdk.pypicosdk.ps6000a.stop","text":"Stop data acquisition on the device. Returns: None \u2013 None","title":"stop"},{"location":"ref/ps6000a/setup/","text":"Setup / Initialization Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description close_unit Closes the PicoScope device and releases the hardware handle. get_device_resolution Return the currently configured resolution. get_enumerated_units Returns count, serials and serial string length of a specific PicoScope unit. get_unit_info Get specified information from unit. Use UNIT_INFO.XXXX or integer. get_unit_serial Get and return batch and serial of unit. open_unit Opens PicoScope unit. open_unit_async Open a unit without blocking the calling thread. open_unit_progress Check the progress of :meth: open_unit_async . ping_unit Check that the device is still connected. set_device_resolution Configure the ADC resolution using ps6000aSetDeviceResolution . close_unit() Closes the PicoScope device and releases the hardware handle. This calls the PicoSDK CloseUnit function to properly disconnect from the device. Returns: None \u2013 None get_device_resolution() Return the currently configured resolution. Returns: :class: RESOLUTION : Device resolution. get_enumerated_units() Returns count, serials and serial string length of a specific PicoScope unit. Returns: int \u2013 Number of devices of this type str \u2013 Comma separated string of all serials int \u2013 Length of string get_unit_info(unit_info) Get specified information from unit. Use UNIT_INFO.XXXX or integer. Parameters: unit_info ( UNIT_INFO ) \u2013 Specify information from PicoScope unit i.e. UNIT_INFO.PICO_BATCH_AND_SERIAL. Returns: str ( str ) \u2013 Returns data from device. get_unit_serial() Get and return batch and serial of unit. Returns: str ( str ) \u2013 Returns serial, e.g., \"JR628/0017\". open_unit(serial_number=None, resolution=0) Opens PicoScope unit. Parameters: serial_number ( int , default: None ) \u2013 Serial number of specific unit, e.g., JR628/0017. resolution ( RESOLUTION , default: 0 ) \u2013 Resolution of device. open_unit_async(serial_number=None, resolution=0) Open a unit without blocking the calling thread. Wraps ps6000aOpenUnitAsync which begins the open operation and returns immediately. Args: serial_number: Serial number of the device to open. resolution: Requested resolution for the device. Returns: int: Status flag from the driver ( 0 if the request was not started, 1 if the operation began successfully). open_unit_progress() Check the progress of :meth: open_unit_async . This wraps ps6000aOpenUnitProgress and should be called repeatedly until complete is non-zero. Returns: tuple[int, int, int]: (handle, progress_percent, complete) . ping_unit() Check that the device is still connected. This wraps ps6000aPingUnit which verifies communication with the PicoScope. If the call succeeds the method returns True . Returns: bool: True if the unit responded. set_device_resolution(resolution) Configure the ADC resolution using ps6000aSetDeviceResolution . Args: resolution: Desired resolution as a :class: RESOLUTION value.","title":"Setup / Initialization"},{"location":"ref/ps6000a/setup/#setup-initialization","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description close_unit Closes the PicoScope device and releases the hardware handle. get_device_resolution Return the currently configured resolution. get_enumerated_units Returns count, serials and serial string length of a specific PicoScope unit. get_unit_info Get specified information from unit. Use UNIT_INFO.XXXX or integer. get_unit_serial Get and return batch and serial of unit. open_unit Opens PicoScope unit. open_unit_async Open a unit without blocking the calling thread. open_unit_progress Check the progress of :meth: open_unit_async . ping_unit Check that the device is still connected. set_device_resolution Configure the ADC resolution using ps6000aSetDeviceResolution .","title":"Setup / Initialization"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.close_unit","text":"Closes the PicoScope device and releases the hardware handle. This calls the PicoSDK CloseUnit function to properly disconnect from the device. Returns: None \u2013 None","title":"close_unit"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.get_device_resolution","text":"Return the currently configured resolution. Returns: :class: RESOLUTION : Device resolution.","title":"get_device_resolution"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.get_enumerated_units","text":"Returns count, serials and serial string length of a specific PicoScope unit. Returns: int \u2013 Number of devices of this type str \u2013 Comma separated string of all serials int \u2013 Length of string","title":"get_enumerated_units"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.get_unit_info","text":"Get specified information from unit. Use UNIT_INFO.XXXX or integer. Parameters: unit_info ( UNIT_INFO ) \u2013 Specify information from PicoScope unit i.e. UNIT_INFO.PICO_BATCH_AND_SERIAL. Returns: str ( str ) \u2013 Returns data from device.","title":"get_unit_info"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.get_unit_serial","text":"Get and return batch and serial of unit. Returns: str ( str ) \u2013 Returns serial, e.g., \"JR628/0017\".","title":"get_unit_serial"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.open_unit","text":"Opens PicoScope unit. Parameters: serial_number ( int , default: None ) \u2013 Serial number of specific unit, e.g., JR628/0017. resolution ( RESOLUTION , default: 0 ) \u2013 Resolution of device.","title":"open_unit"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.open_unit_async","text":"Open a unit without blocking the calling thread. Wraps ps6000aOpenUnitAsync which begins the open operation and returns immediately. Args: serial_number: Serial number of the device to open. resolution: Requested resolution for the device. Returns: int: Status flag from the driver ( 0 if the request was not started, 1 if the operation began successfully).","title":"open_unit_async"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.open_unit_progress","text":"Check the progress of :meth: open_unit_async . This wraps ps6000aOpenUnitProgress and should be called repeatedly until complete is non-zero. Returns: tuple[int, int, int]: (handle, progress_percent, complete) .","title":"open_unit_progress"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.ping_unit","text":"Check that the device is still connected. This wraps ps6000aPingUnit which verifies communication with the PicoScope. If the call succeeds the method returns True . Returns: bool: True if the unit responded.","title":"ping_unit"},{"location":"ref/ps6000a/setup/#pypicosdk.pypicosdk.ps6000a.set_device_resolution","text":"Configure the ADC resolution using ps6000aSetDeviceResolution . Args: resolution: Desired resolution as a :class: RESOLUTION value.","title":"set_device_resolution"},{"location":"ref/ps6000a/siggen/","text":"Signal Generator Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description set_siggen Configures and applies the signal generator settings. set_siggen_awg Arbitrary Waveform Generation - Generates a signal from a given buffer. siggen_apply Sets the signal generator running using parameters previously configured. siggen_clock_manual Manually control the signal generator clock. siggen_filter Enable or disable the signal generator output filter. siggen_frequency_limits Query frequency sweep limits for the signal generator. siggen_frequency_sweep Configure frequency sweep parameters. siggen_limits Query signal generator parameter limits. siggen_pause Pause the signal generator. siggen_phase Set the signal generator phase using delta_phase . siggen_phase_sweep Configure a phase sweep for the signal generator. siggen_restart Restart the signal generator after a pause. siggen_set_duty_cycle Set duty cycle of SigGen in percentage. siggen_set_frequency Set frequency of SigGen in Hz. siggen_set_range Set mV range of SigGen (6000A). siggen_set_waveform Set waveform type for SigGen (6000A). If arbitrary mode is selected, siggen_software_trigger_control Control software triggering for the signal generator. siggen_trigger Configure signal generator triggering. set_siggen(frequency, pk2pk, wave_type, offset=0.0, duty=50, sweep=False, stop_freq=None, inc_freq=1, dwell_time=0.001, sweep_type=SWEEP_TYPE.UP) Configures and applies the signal generator settings. Sets up the signal generator with the specified waveform type, frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). wave_type ( WAVEFORM ) \u2013 Waveform type (e.g., WAVEFORM.SINE, WAVEFORM.SQUARE). offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). duty ( int or float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1 Hz. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 1 ms. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values. set_siggen_awg(frequency, pk2pk, buffer, offset=0.0, duty=50, sweep=False, stop_freq=None, inc_freq=1, dwell_time=0.001, sweep_type=SWEEP_TYPE.UP) Arbitrary Waveform Generation - Generates a signal from a given buffer. Sets up the signal generator with a specified frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). buffer ( ndarray | list ) \u2013 description offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). Defaults to 0.0. duty ( float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). Defaults to 50. sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 0.001. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Raises: PicoSDKException \u2013 description Returns: dict ( dict ) \u2013 description siggen_apply(enabled=1, sweep_enabled=0, trigger_enabled=0, auto_clock_optimise_enabled=0, override_auto_clock_prescale=0) Sets the signal generator running using parameters previously configured. Parameters: enabled ( int , default: 1 ) \u2013 SigGen Enabled, sweep_enabled ( int , default: 0 ) \u2013 Sweep Enabled, trigger_enabled ( int , default: 0 ) \u2013 SigGen trigger enabled, auto_clock_optimise_enabled ( int , default: 0 ) \u2013 Auto Clock Optimisation, override_auto_clock_prescale ( int , default: 0 ) \u2013 Override Clock Prescale, Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values. siggen_clock_manual(dac_clock_frequency, prescale_ratio) Manually control the signal generator clock. Args: dac_clock_frequency: Frequency of the DAC clock in Hz. prescale_ratio: Prescale divisor for the DAC clock. siggen_filter(filter_state) Enable or disable the signal generator output filter. Args: filter_state: can be set on or off, or put in automatic mode. siggen_frequency_limits(wave_type, num_samples, start_frequency, sweep_enabled, manual_dac_clock_frequency=None, manual_prescale_ratio=None) Query frequency sweep limits for the signal generator. Args: wave_type: Waveform type. num_samples: Number of samples in the arbitrary waveform buffer. start_frequency: Starting frequency in Hz. sweep_enabled: Whether a sweep is enabled. manual_dac_clock_frequency: Optional manual DAC clock frequency. manual_prescale_ratio: Optional manual DAC prescale ratio. Returns: dict: Frequency limit information with keys max_stop_frequency , min_frequency_step , max_frequency_step , min_dwell_time and max_dwell_time . siggen_frequency_sweep(stop_frequency_hz, frequency_increment, dwell_time_s, sweep_type) Configure frequency sweep parameters. Args: stop_frequency_hz: End frequency of the sweep in Hz. frequency_increment: Increment value in Hz. dwell_time_s: Time to dwell at each frequency in seconds. sweep_type: Sweep direction. siggen_limits(parameter) Query signal generator parameter limits. Args: parameter: Signal generator parameter to query. Returns: dict: Dictionary with keys min , max and step . siggen_pause() Pause the signal generator. siggen_phase(delta_phase) Set the signal generator phase using delta_phase . The signal generator uses direct digital synthesis (DDS) with a 32-bit phase accumulator that indicates the present location in the waveform. The top bits of the phase accumulator are used as an index into a buffer containing the arbitrary waveform. The remaining bits act as the fractional part of the index, enabling highresolution control of output frequency and allowing the generation of lower frequencies. The signal generator steps through the waveform by adding a deltaPhase value between 1 and phaseAccumulatorSize-1 to the phase accumulator every dacPeriod (= 1/dacFrequency). Parameters: delta_phase ( int ) \u2013 Phase offset to apply. siggen_phase_sweep(stop_delta_phase, delta_phase_increment, dwell_count, sweep_type) Configure a phase sweep for the signal generator. Args: stop_delta_phase: End phase in DAC counts. delta_phase_increment: Increment value in DAC counts. dwell_count: Number of DAC cycles to dwell at each phase step. sweep_type: Sweep direction. siggen_restart() Restart the signal generator after a pause. siggen_set_duty_cycle(duty) Set duty cycle of SigGen in percentage. Parameters: duty ( float ) \u2013 Duty cycle in %. siggen_set_frequency(frequency) Set frequency of SigGen in Hz. Parameters: frequency ( int ) \u2013 Frequency in Hz. siggen_set_range(pk2pk, offset=0.0) Set mV range of SigGen (6000A). Parameters: pk2pk ( int ) \u2013 Peak to peak of signal in volts (V). offset ( int , default: 0.0 ) \u2013 Offset of signal in volts (V). siggen_set_waveform(wave_type, buffer=None) Set waveform type for SigGen (6000A). If arbitrary mode is selected, a buffer of ADC samples is needed. Parameters: wave_type ( WAVEFORM ) \u2013 Waveform type i.e. WAVEFORM.SINE. buffer ( ndarray | None , default: None ) \u2013 np.array buffer to be used in WAVEFORM.ARBITRARY mode. siggen_software_trigger_control(trigger_state) Control software triggering for the signal generator. Args: trigger_state: 1 to enable the software trigger, 0 to disable. siggen_trigger(trigger_type, trigger_source, cycles, auto_trigger_ps=0) Configure signal generator triggering. Args: trigger_type: Trigger type to use. trigger_source: Source for the trigger. cycles: Number of cycles before the trigger occurs. auto_trigger_ps: Time in picoseconds before auto-triggering.","title":"Signal Generator"},{"location":"ref/ps6000a/siggen/#signal-generator","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description set_siggen Configures and applies the signal generator settings. set_siggen_awg Arbitrary Waveform Generation - Generates a signal from a given buffer. siggen_apply Sets the signal generator running using parameters previously configured. siggen_clock_manual Manually control the signal generator clock. siggen_filter Enable or disable the signal generator output filter. siggen_frequency_limits Query frequency sweep limits for the signal generator. siggen_frequency_sweep Configure frequency sweep parameters. siggen_limits Query signal generator parameter limits. siggen_pause Pause the signal generator. siggen_phase Set the signal generator phase using delta_phase . siggen_phase_sweep Configure a phase sweep for the signal generator. siggen_restart Restart the signal generator after a pause. siggen_set_duty_cycle Set duty cycle of SigGen in percentage. siggen_set_frequency Set frequency of SigGen in Hz. siggen_set_range Set mV range of SigGen (6000A). siggen_set_waveform Set waveform type for SigGen (6000A). If arbitrary mode is selected, siggen_software_trigger_control Control software triggering for the signal generator. siggen_trigger Configure signal generator triggering.","title":"Signal Generator"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.set_siggen","text":"Configures and applies the signal generator settings. Sets up the signal generator with the specified waveform type, frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). wave_type ( WAVEFORM ) \u2013 Waveform type (e.g., WAVEFORM.SINE, WAVEFORM.SQUARE). offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). duty ( int or float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1 Hz. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 1 ms. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values.","title":"set_siggen"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.set_siggen_awg","text":"Arbitrary Waveform Generation - Generates a signal from a given buffer. Sets up the signal generator with a specified frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). buffer ( ndarray | list ) \u2013 description offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). Defaults to 0.0. duty ( float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). Defaults to 50. sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 0.001. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Raises: PicoSDKException \u2013 description Returns: dict ( dict ) \u2013 description","title":"set_siggen_awg"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_apply","text":"Sets the signal generator running using parameters previously configured. Parameters: enabled ( int , default: 1 ) \u2013 SigGen Enabled, sweep_enabled ( int , default: 0 ) \u2013 Sweep Enabled, trigger_enabled ( int , default: 0 ) \u2013 SigGen trigger enabled, auto_clock_optimise_enabled ( int , default: 0 ) \u2013 Auto Clock Optimisation, override_auto_clock_prescale ( int , default: 0 ) \u2013 Override Clock Prescale, Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values.","title":"siggen_apply"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_clock_manual","text":"Manually control the signal generator clock. Args: dac_clock_frequency: Frequency of the DAC clock in Hz. prescale_ratio: Prescale divisor for the DAC clock.","title":"siggen_clock_manual"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_filter","text":"Enable or disable the signal generator output filter. Args: filter_state: can be set on or off, or put in automatic mode.","title":"siggen_filter"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_frequency_limits","text":"Query frequency sweep limits for the signal generator. Args: wave_type: Waveform type. num_samples: Number of samples in the arbitrary waveform buffer. start_frequency: Starting frequency in Hz. sweep_enabled: Whether a sweep is enabled. manual_dac_clock_frequency: Optional manual DAC clock frequency. manual_prescale_ratio: Optional manual DAC prescale ratio. Returns: dict: Frequency limit information with keys max_stop_frequency , min_frequency_step , max_frequency_step , min_dwell_time and max_dwell_time .","title":"siggen_frequency_limits"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_frequency_sweep","text":"Configure frequency sweep parameters. Args: stop_frequency_hz: End frequency of the sweep in Hz. frequency_increment: Increment value in Hz. dwell_time_s: Time to dwell at each frequency in seconds. sweep_type: Sweep direction.","title":"siggen_frequency_sweep"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_limits","text":"Query signal generator parameter limits. Args: parameter: Signal generator parameter to query. Returns: dict: Dictionary with keys min , max and step .","title":"siggen_limits"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_pause","text":"Pause the signal generator.","title":"siggen_pause"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_phase","text":"Set the signal generator phase using delta_phase . The signal generator uses direct digital synthesis (DDS) with a 32-bit phase accumulator that indicates the present location in the waveform. The top bits of the phase accumulator are used as an index into a buffer containing the arbitrary waveform. The remaining bits act as the fractional part of the index, enabling highresolution control of output frequency and allowing the generation of lower frequencies. The signal generator steps through the waveform by adding a deltaPhase value between 1 and phaseAccumulatorSize-1 to the phase accumulator every dacPeriod (= 1/dacFrequency). Parameters: delta_phase ( int ) \u2013 Phase offset to apply.","title":"siggen_phase"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_phase_sweep","text":"Configure a phase sweep for the signal generator. Args: stop_delta_phase: End phase in DAC counts. delta_phase_increment: Increment value in DAC counts. dwell_count: Number of DAC cycles to dwell at each phase step. sweep_type: Sweep direction.","title":"siggen_phase_sweep"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_restart","text":"Restart the signal generator after a pause.","title":"siggen_restart"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_set_duty_cycle","text":"Set duty cycle of SigGen in percentage. Parameters: duty ( float ) \u2013 Duty cycle in %.","title":"siggen_set_duty_cycle"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_set_frequency","text":"Set frequency of SigGen in Hz. Parameters: frequency ( int ) \u2013 Frequency in Hz.","title":"siggen_set_frequency"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_set_range","text":"Set mV range of SigGen (6000A). Parameters: pk2pk ( int ) \u2013 Peak to peak of signal in volts (V). offset ( int , default: 0.0 ) \u2013 Offset of signal in volts (V).","title":"siggen_set_range"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_set_waveform","text":"Set waveform type for SigGen (6000A). If arbitrary mode is selected, a buffer of ADC samples is needed. Parameters: wave_type ( WAVEFORM ) \u2013 Waveform type i.e. WAVEFORM.SINE. buffer ( ndarray | None , default: None ) \u2013 np.array buffer to be used in WAVEFORM.ARBITRARY mode.","title":"siggen_set_waveform"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_software_trigger_control","text":"Control software triggering for the signal generator. Args: trigger_state: 1 to enable the software trigger, 0 to disable.","title":"siggen_software_trigger_control"},{"location":"ref/ps6000a/siggen/#pypicosdk.pypicosdk.ps6000a.siggen_trigger","text":"Configure signal generator triggering. Args: trigger_type: Trigger type to use. trigger_source: Source for the trigger. cycles: Number of cycles before the trigger occurs. auto_trigger_ps: Time in picoseconds before auto-triggering.","title":"siggen_trigger"},{"location":"ref/ps6000a/trigger/","text":"Trigger Configuration Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_trigger_info Retrieve trigger timing information for one or more segments. get_trigger_time_offset Get the trigger time offset for jitter correction in waveforms. get_values_trigger_time_offset_bulk Retrieve trigger time offsets for a range of segments. set_advanced_trigger Configure an advanced trigger in a single call. set_aux_io_mode Configure the AUX IO connector using ps6000aSetAuxIoMode . set_pulse_width_trigger Configures a pulse width trigger using a specified channel and timing parameters. set_simple_trigger Sets up a simple trigger from a specified channel and threshold in mV. set_trigger_channel_conditions Configure a trigger condition. set_trigger_channel_directions Specify the trigger direction for channel . set_trigger_channel_properties Configure trigger thresholds for channel . All set_trigger_delay Delay the trigger by delay samples. set_trigger_digital_port_properties Configure digital port trigger directions. set_trigger_holdoff_counter_by_samples Set the trigger holdoff period in sample intervals. trigger_within_pre_trigger_samples Control trigger positioning relative to pre-trigger samples. get_trigger_info(first_segment_index=0, segment_count=1) Retrieve trigger timing information for one or more segments. Parameters: first_segment_index ( int , default: 0 ) \u2013 Index of the first memory segment to query. segment_count ( int , default: 1 ) \u2013 Number of consecutive segments starting at first_segment_index . Returns: list [ dict ] \u2013 List of dictionaries for each trigger event Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met. get_trigger_time_offset(time_unit, segment_index=0) Get the trigger time offset for jitter correction in waveforms. The driver interpolates between adjacent samples to estimate when the trigger actually occurred. This means the value returned can have a very fine granularity\u2014down to femtoseconds\u2014even though the effective resolution is usually limited to roughly one-tenth of the sampling interval in real-world use. Parameters: time_unit ( TIME_UNIT ) \u2013 Desired unit for the returned offset. segment_index ( int , default: 0 ) \u2013 The memory segment to query. Default is 0. Returns: int ( int ) \u2013 Trigger time offset converted to time_unit . Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met. get_values_trigger_time_offset_bulk(from_segment_index, to_segment_index) Retrieve trigger time offsets for a range of segments. This method returns the trigger time offset and associated time unit for each requested segment. Parameters: from_segment_index ( int ) \u2013 Index of the first memory segment to query. to_segment_index ( int ) \u2013 Index of the last memory segment. If this value is less than from_segment_index the driver wraps around. Returns: list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 list[tuple[int, PICO_TIME_UNIT]]: [(offset, unit), ...] for each list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 segment beginning with from_segment_index . set_advanced_trigger(channel, state, direction, threshold_mode, threshold_upper_mv, threshold_lower_mv, hysteresis_upper_mv=0.0, hysteresis_lower_mv=0.0, aux_output_enable=0, auto_trigger_ms=0, action=ACTION.CLEAR_ALL | ACTION.ADD) Configure an advanced trigger in a single call. This helper sets up the trigger condition, direction and properties required for non-simple triggers. Parameters: channel ( int ) \u2013 Channel to monitor for the trigger condition. state ( int ) \u2013 Trigger state used with set_trigger_channel_conditions . direction ( int ) \u2013 Trigger direction from :class: PICO_THRESHOLD_DIRECTION . threshold_mode ( int ) \u2013 Threshold mode from :class: PICO_THRESHOLD_MODE . threshold_upper_mv ( float ) \u2013 Upper trigger threshold in millivolts. threshold_lower_mv ( float ) \u2013 Lower trigger threshold in millivolts. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_upper_mv in millivolts. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_lower_mv in millivolts. aux_output_enable ( int , default: 0 ) \u2013 Optional auxiliary output flag. auto_trigger_ms ( int , default: 0 ) \u2013 Auto-trigger timeout in milliseconds. 0 waits indefinitely. action ( int , default: CLEAR_ALL | ADD ) \u2013 Action flag for set_trigger_channel_conditions . set_aux_io_mode(mode) Configure the AUX IO connector using ps6000aSetAuxIoMode . Parameters: mode ( AUXIO_MODE ) \u2013 Requested AUXIO mode from :class: ~pypicosdk.constants.AUXIO_MODE . set_pulse_width_trigger(channel, timebase, samples, direction, pulse_width_type, time_upper=0, time_upper_units=TIME_UNIT.US, time_lower=0, time_lower_units=TIME_UNIT.US, threshold_upper_mv=0.0, threshold_lower_mv=0.0, hysteresis_upper_mv=0.0, hysteresis_lower_mv=0.0, trig_dir=None, threshold_mode=THRESHOLD_MODE.LEVEL, auto_trigger_us=0) Configures a pulse width trigger using a specified channel and timing parameters. This method sets up a trigger condition where a pulse on the specified channel must be within or outside a defined pulse width window. The trigger logic uses both level thresholds and pulse width qualifiers to define the trigger behavior. Parameters: channel ( CHANNEL ) \u2013 The input channel on which to apply the pulse width trigger. timebase ( int ) \u2013 The timebase index to determine sampling interval. samples ( int ) \u2013 The number of samples to be captured (used to resolve timing). direction ( THRESHOLD_DIRECTION ) \u2013 Pulse polarity to trigger on (e.g. RISING or FALLING). pulse_width_type ( PULSE_WIDTH_TYPE ) \u2013 Type of pulse width qualifier (e.g. GREATER_THAN). time_upper ( float , default: 0 ) \u2013 Upper time bound for pulse width. Default is 0 (disabled). time_upper_units ( TIME_UNIT , default: US ) \u2013 Units for time_upper . Default is microseconds. time_lower ( float , default: 0 ) \u2013 Lower time bound for pulse width. Default is 0 (disabled). time_lower_units ( TIME_UNIT , default: US ) \u2013 Units for time_lower . Default is microseconds. threshold_upper_mv ( float , default: 0.0 ) \u2013 Upper voltage threshold in millivolts. Default is 0.0 mV. threshold_lower_mv ( float , default: 0.0 ) \u2013 Lower voltage threshold in millivolts. Default is 0.0 mV. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Hysteresis for upper threshold in mV. Default is 0.0 mV. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Hysteresis for lower threshold in mV. Default is 0.0 mV. trig_dir ( THRESHOLD_DIRECTION , default: None ) \u2013 Trigger direction for the initial pulse. If None, inferred as opposite of direction . Default is None. threshold_mode ( THRESHOLD_MODE , default: LEVEL ) \u2013 Specifies whether thresholds are in level or window mode. Default is LEVEL. auto_trigger_us ( int , default: 0 ) \u2013 Time in microseconds after which an automatic trigger occurs. Default is 0 (disabled). set_simple_trigger(channel, threshold=0, threshold_unit='mv', enable=True, direction=TRIGGER_DIR.RISING, delay=0, auto_trigger=0) Sets up a simple trigger from a specified channel and threshold in mV. Parameters: channel ( CHANNEL | str ) \u2013 The input channel to apply the trigger to. threshold ( int , default: 0 ) \u2013 Trigger threshold level. threshold_unit ( str , default: 'mv' ) \u2013 Trigger threshold unit. Default is 'mv'. enable ( bool , default: True ) \u2013 Enables or disables the trigger. direction ( TRIGGER_DIR | str , default: RISING ) \u2013 Trigger direction (e.g., TRIGGER_DIR.RISING ). delay ( int , default: 0 ) \u2013 Delay in samples after the trigger condition is met before starting capture. auto_trigger ( int , default: 0 ) \u2013 Timeout in microseconds after which data capture proceeds even if no trigger occurs. If 0, the PicoScope will wait indefintely. Examples: When using TRIGGER_AUX, threshold is fixed to 1.25 V >>> scope.set_simple_trigger(channel=psdk.CHANNEL.TRIGGER_AUX) set_trigger_channel_conditions(conditions, action=ACTION.CLEAR_ALL | ACTION.ADD) Configure a trigger condition. Parameters: conditions ( list [ tuple [ CHANNEL , TRIGGER_STATE ]] ) \u2013 A list of tuples describing the CHANNEL and TRIGGER_STATE for that channel action ( int , default: CLEAR_ALL | ADD ) \u2013 Action to apply this condition relateive to any previous condition. Defaults to ACTION.CLEAR_ALL | ACTION.ADD. set_trigger_channel_directions(channel, direction, threshold_mode) Specify the trigger direction for channel . If multiple directions are needed, channel, direction and threshold_mode can be given a list of values. Parameters: channel ( CHANNEL | list ) \u2013 Single or list of channels to configure. direction ( THRESHOLD_DIRECTION | list ) \u2013 Single or list of directions to configure. threshold_mode ( THRESHOLD_MODE | list ) \u2013 Single or list of threshold modes to configure. set_trigger_channel_properties(threshold_upper, hysteresis_upper, threshold_lower, hysteresis_lower, channel, aux_output_enable=0, auto_trigger_us=0) Configure trigger thresholds for channel . All threshold and hysteresis values are specified in ADC counts. Parameters: threshold_upper ( int ) \u2013 Upper trigger level. hysteresis_upper ( int ) \u2013 Hysteresis for threshold_upper . threshold_lower ( int ) \u2013 Lower trigger level. hysteresis_lower ( int ) \u2013 Hysteresis for threshold_lower . channel ( int ) \u2013 Target channel as a :class: CHANNEL value. aux_output_enable ( int , default: 0 ) \u2013 Auxiliary output flag. auto_trigger_us ( int , default: 0 ) \u2013 Auto-trigger timeout in microseconds. 0 waits indefinitely. set_trigger_delay(delay) Delay the trigger by delay samples. Args: delay: Number of samples to delay the trigger by. set_trigger_digital_port_properties(port, directions) Configure digital port trigger directions. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration. set_trigger_holdoff_counter_by_samples(samples) Set the trigger holdoff period in sample intervals. Args: samples: Number of samples for the holdoff period. trigger_within_pre_trigger_samples(state) Control trigger positioning relative to pre-trigger samples. Args: state: 0 to enable, 1 to disable","title":"Trigger Configuration"},{"location":"ref/ps6000a/trigger/#trigger-configuration","text":"Bases: PicoScopeBase , shared_ps6000a_psospa , shared_4000a_6000a PicoScope 6000 (A) API specific functions Methods: Name Description get_trigger_info Retrieve trigger timing information for one or more segments. get_trigger_time_offset Get the trigger time offset for jitter correction in waveforms. get_values_trigger_time_offset_bulk Retrieve trigger time offsets for a range of segments. set_advanced_trigger Configure an advanced trigger in a single call. set_aux_io_mode Configure the AUX IO connector using ps6000aSetAuxIoMode . set_pulse_width_trigger Configures a pulse width trigger using a specified channel and timing parameters. set_simple_trigger Sets up a simple trigger from a specified channel and threshold in mV. set_trigger_channel_conditions Configure a trigger condition. set_trigger_channel_directions Specify the trigger direction for channel . set_trigger_channel_properties Configure trigger thresholds for channel . All set_trigger_delay Delay the trigger by delay samples. set_trigger_digital_port_properties Configure digital port trigger directions. set_trigger_holdoff_counter_by_samples Set the trigger holdoff period in sample intervals. trigger_within_pre_trigger_samples Control trigger positioning relative to pre-trigger samples.","title":"Trigger Configuration"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.get_trigger_info","text":"Retrieve trigger timing information for one or more segments. Parameters: first_segment_index ( int , default: 0 ) \u2013 Index of the first memory segment to query. segment_count ( int , default: 1 ) \u2013 Number of consecutive segments starting at first_segment_index . Returns: list [ dict ] \u2013 List of dictionaries for each trigger event Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met.","title":"get_trigger_info"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.get_trigger_time_offset","text":"Get the trigger time offset for jitter correction in waveforms. The driver interpolates between adjacent samples to estimate when the trigger actually occurred. This means the value returned can have a very fine granularity\u2014down to femtoseconds\u2014even though the effective resolution is usually limited to roughly one-tenth of the sampling interval in real-world use. Parameters: time_unit ( TIME_UNIT ) \u2013 Desired unit for the returned offset. segment_index ( int , default: 0 ) \u2013 The memory segment to query. Default is 0. Returns: int ( int ) \u2013 Trigger time offset converted to time_unit . Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met.","title":"get_trigger_time_offset"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.get_values_trigger_time_offset_bulk","text":"Retrieve trigger time offsets for a range of segments. This method returns the trigger time offset and associated time unit for each requested segment. Parameters: from_segment_index ( int ) \u2013 Index of the first memory segment to query. to_segment_index ( int ) \u2013 Index of the last memory segment. If this value is less than from_segment_index the driver wraps around. Returns: list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 list[tuple[int, PICO_TIME_UNIT]]: [(offset, unit), ...] for each list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 segment beginning with from_segment_index .","title":"get_values_trigger_time_offset_bulk"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_advanced_trigger","text":"Configure an advanced trigger in a single call. This helper sets up the trigger condition, direction and properties required for non-simple triggers. Parameters: channel ( int ) \u2013 Channel to monitor for the trigger condition. state ( int ) \u2013 Trigger state used with set_trigger_channel_conditions . direction ( int ) \u2013 Trigger direction from :class: PICO_THRESHOLD_DIRECTION . threshold_mode ( int ) \u2013 Threshold mode from :class: PICO_THRESHOLD_MODE . threshold_upper_mv ( float ) \u2013 Upper trigger threshold in millivolts. threshold_lower_mv ( float ) \u2013 Lower trigger threshold in millivolts. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_upper_mv in millivolts. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_lower_mv in millivolts. aux_output_enable ( int , default: 0 ) \u2013 Optional auxiliary output flag. auto_trigger_ms ( int , default: 0 ) \u2013 Auto-trigger timeout in milliseconds. 0 waits indefinitely. action ( int , default: CLEAR_ALL | ADD ) \u2013 Action flag for set_trigger_channel_conditions .","title":"set_advanced_trigger"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_aux_io_mode","text":"Configure the AUX IO connector using ps6000aSetAuxIoMode . Parameters: mode ( AUXIO_MODE ) \u2013 Requested AUXIO mode from :class: ~pypicosdk.constants.AUXIO_MODE .","title":"set_aux_io_mode"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_pulse_width_trigger","text":"Configures a pulse width trigger using a specified channel and timing parameters. This method sets up a trigger condition where a pulse on the specified channel must be within or outside a defined pulse width window. The trigger logic uses both level thresholds and pulse width qualifiers to define the trigger behavior. Parameters: channel ( CHANNEL ) \u2013 The input channel on which to apply the pulse width trigger. timebase ( int ) \u2013 The timebase index to determine sampling interval. samples ( int ) \u2013 The number of samples to be captured (used to resolve timing). direction ( THRESHOLD_DIRECTION ) \u2013 Pulse polarity to trigger on (e.g. RISING or FALLING). pulse_width_type ( PULSE_WIDTH_TYPE ) \u2013 Type of pulse width qualifier (e.g. GREATER_THAN). time_upper ( float , default: 0 ) \u2013 Upper time bound for pulse width. Default is 0 (disabled). time_upper_units ( TIME_UNIT , default: US ) \u2013 Units for time_upper . Default is microseconds. time_lower ( float , default: 0 ) \u2013 Lower time bound for pulse width. Default is 0 (disabled). time_lower_units ( TIME_UNIT , default: US ) \u2013 Units for time_lower . Default is microseconds. threshold_upper_mv ( float , default: 0.0 ) \u2013 Upper voltage threshold in millivolts. Default is 0.0 mV. threshold_lower_mv ( float , default: 0.0 ) \u2013 Lower voltage threshold in millivolts. Default is 0.0 mV. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Hysteresis for upper threshold in mV. Default is 0.0 mV. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Hysteresis for lower threshold in mV. Default is 0.0 mV. trig_dir ( THRESHOLD_DIRECTION , default: None ) \u2013 Trigger direction for the initial pulse. If None, inferred as opposite of direction . Default is None. threshold_mode ( THRESHOLD_MODE , default: LEVEL ) \u2013 Specifies whether thresholds are in level or window mode. Default is LEVEL. auto_trigger_us ( int , default: 0 ) \u2013 Time in microseconds after which an automatic trigger occurs. Default is 0 (disabled).","title":"set_pulse_width_trigger"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_simple_trigger","text":"Sets up a simple trigger from a specified channel and threshold in mV. Parameters: channel ( CHANNEL | str ) \u2013 The input channel to apply the trigger to. threshold ( int , default: 0 ) \u2013 Trigger threshold level. threshold_unit ( str , default: 'mv' ) \u2013 Trigger threshold unit. Default is 'mv'. enable ( bool , default: True ) \u2013 Enables or disables the trigger. direction ( TRIGGER_DIR | str , default: RISING ) \u2013 Trigger direction (e.g., TRIGGER_DIR.RISING ). delay ( int , default: 0 ) \u2013 Delay in samples after the trigger condition is met before starting capture. auto_trigger ( int , default: 0 ) \u2013 Timeout in microseconds after which data capture proceeds even if no trigger occurs. If 0, the PicoScope will wait indefintely. Examples: When using TRIGGER_AUX, threshold is fixed to 1.25 V >>> scope.set_simple_trigger(channel=psdk.CHANNEL.TRIGGER_AUX)","title":"set_simple_trigger"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_trigger_channel_conditions","text":"Configure a trigger condition. Parameters: conditions ( list [ tuple [ CHANNEL , TRIGGER_STATE ]] ) \u2013 A list of tuples describing the CHANNEL and TRIGGER_STATE for that channel action ( int , default: CLEAR_ALL | ADD ) \u2013 Action to apply this condition relateive to any previous condition. Defaults to ACTION.CLEAR_ALL | ACTION.ADD.","title":"set_trigger_channel_conditions"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_trigger_channel_directions","text":"Specify the trigger direction for channel . If multiple directions are needed, channel, direction and threshold_mode can be given a list of values. Parameters: channel ( CHANNEL | list ) \u2013 Single or list of channels to configure. direction ( THRESHOLD_DIRECTION | list ) \u2013 Single or list of directions to configure. threshold_mode ( THRESHOLD_MODE | list ) \u2013 Single or list of threshold modes to configure.","title":"set_trigger_channel_directions"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_trigger_channel_properties","text":"Configure trigger thresholds for channel . All threshold and hysteresis values are specified in ADC counts. Parameters: threshold_upper ( int ) \u2013 Upper trigger level. hysteresis_upper ( int ) \u2013 Hysteresis for threshold_upper . threshold_lower ( int ) \u2013 Lower trigger level. hysteresis_lower ( int ) \u2013 Hysteresis for threshold_lower . channel ( int ) \u2013 Target channel as a :class: CHANNEL value. aux_output_enable ( int , default: 0 ) \u2013 Auxiliary output flag. auto_trigger_us ( int , default: 0 ) \u2013 Auto-trigger timeout in microseconds. 0 waits indefinitely.","title":"set_trigger_channel_properties"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_trigger_delay","text":"Delay the trigger by delay samples. Args: delay: Number of samples to delay the trigger by.","title":"set_trigger_delay"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_trigger_digital_port_properties","text":"Configure digital port trigger directions. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration.","title":"set_trigger_digital_port_properties"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.set_trigger_holdoff_counter_by_samples","text":"Set the trigger holdoff period in sample intervals. Args: samples: Number of samples for the holdoff period.","title":"set_trigger_holdoff_counter_by_samples"},{"location":"ref/ps6000a/trigger/#pypicosdk.pypicosdk.ps6000a.trigger_within_pre_trigger_samples","text":"Control trigger positioning relative to pre-trigger samples. Args: state: 0 to enable, 1 to disable","title":"trigger_within_pre_trigger_samples"},{"location":"ref/psospa/buffers/","text":"Memory / Buffer Management Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_maximum_available_memory Return the maximum sample depth for the current resolution. memory_segments Configure the number of memory segments. memory_segments_by_samples Set the samples per memory segment. set_data_buffer Allocates and assigns a data buffer for a specified channel on the 6000A series. set_data_buffer_for_enabled_channels Sets data buffers for enabled channels set by picosdk.set_channel() set_data_buffer_rapid_capture Allocates and assigns multiple data buffers for rapid block capture on a specified channel. set_data_buffers Allocate and assign max and min NumPy-backed data buffers. set_data_buffers_rapid_capture Allocate and assign max and min NumPy-backed data buffers for rapid block get_maximum_available_memory() Return the maximum sample depth for the current resolution. Wraps ps6000aGetMaximumAvailableMemory to query how many samples can be captured at self.resolution . Returns: int: Maximum number of samples supported. Raises: PicoSDKException: If the device has not been opened. memory_segments(n_segments) Configure the number of memory segments. This wraps the ps6000aMemorySegments API call. Parameters: n_segments ( int ) \u2013 Desired number of memory segments. Returns: int ( int ) \u2013 Number of samples available in each segment. memory_segments_by_samples(n_samples) Set the samples per memory segment. This wraps ps6000aMemorySegmentsBySamples which divides the capture memory so that each segment holds n_samples samples. Parameters: n_samples ( int ) \u2013 Number of samples per segment. Returns: int ( int ) \u2013 Number of segments the memory was divided into. set_data_buffer(channel, samples, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, action=ACTION.CLEAR_ALL | ACTION.ADD, buffer=None) Allocates and assigns a data buffer for a specified channel on the 6000A series. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). buffer ( ndarray | None , default: None ) \u2013 Send a preallocated numpy buffer to be populated. If left as None, this function creates its own buffer. Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided. set_data_buffer_for_enabled_channels(samples, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, clear_buffer=True, captures=0) Sets data buffers for enabled channels set by picosdk.set_channel() Parameters: samples ( int ) \u2013 The sample buffer or size to allocate. segment ( int , default: 0 ) \u2013 The memory segment index. datatype ( DATA_TYPE , default: INT16_T ) \u2013 The data type used for the buffer. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 The ratio mode (e.g., RAW, AVERAGE). clear_buffer ( bool , default: True ) \u2013 If True, clear the buffer first captures ( int , default: 0 ) \u2013 If larger than 0, it will create multiple buffers for RAPID mode. Returns: dict ( dict ) \u2013 A dictionary mapping each channel to its associated data buffer. set_data_buffer_rapid_capture(channel, samples, captures, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, action=ACTION.CLEAR_ALL | ACTION.ADD) Allocates and assigns multiple data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided. set_data_buffers(channel, samples, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.AGGREGATE, action=ACTION.CLEAR_ALL | ACTION.ADD, buffers=None) Allocate and assign max and min NumPy-backed data buffers. Parameters: channel ( int ) \u2013 The channel to associate the buffers with. samples ( int ) \u2013 Number of samples to allocate. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: AGGREGATE ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer. buffers ( ndarray | None , default: None ) \u2013 Send preallocated 2D numpy buffers to be populated. Min buffer first, followed by max buffer. If left as None, this function creates its own buffers. Returns: tuple [ ndarray , ndarray ] \u2013 tuple[np.ndarray, np.ndarray]: Tuple of (buffer_min, buffer_max) NumPy arrays. Raises: PicoSDKException \u2013 If an unsupported data type is provided. set_data_buffers_rapid_capture(channel, samples, captures, segment=0, datatype=DATA_TYPE.INT16_T, ratio_mode=RATIO_MODE.RAW, action=ACTION.CLEAR_ALL | ACTION.ADD) Allocate and assign max and min NumPy-backed data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"Memory / Buffer Management"},{"location":"ref/psospa/buffers/#memory-buffer-management","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_maximum_available_memory Return the maximum sample depth for the current resolution. memory_segments Configure the number of memory segments. memory_segments_by_samples Set the samples per memory segment. set_data_buffer Allocates and assigns a data buffer for a specified channel on the 6000A series. set_data_buffer_for_enabled_channels Sets data buffers for enabled channels set by picosdk.set_channel() set_data_buffer_rapid_capture Allocates and assigns multiple data buffers for rapid block capture on a specified channel. set_data_buffers Allocate and assign max and min NumPy-backed data buffers. set_data_buffers_rapid_capture Allocate and assign max and min NumPy-backed data buffers for rapid block","title":"Memory / Buffer Management"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.get_maximum_available_memory","text":"Return the maximum sample depth for the current resolution. Wraps ps6000aGetMaximumAvailableMemory to query how many samples can be captured at self.resolution . Returns: int: Maximum number of samples supported. Raises: PicoSDKException: If the device has not been opened.","title":"get_maximum_available_memory"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.memory_segments","text":"Configure the number of memory segments. This wraps the ps6000aMemorySegments API call. Parameters: n_segments ( int ) \u2013 Desired number of memory segments. Returns: int ( int ) \u2013 Number of samples available in each segment.","title":"memory_segments"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.memory_segments_by_samples","text":"Set the samples per memory segment. This wraps ps6000aMemorySegmentsBySamples which divides the capture memory so that each segment holds n_samples samples. Parameters: n_samples ( int ) \u2013 Number of samples per segment. Returns: int ( int ) \u2013 Number of segments the memory was divided into.","title":"memory_segments_by_samples"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.set_data_buffer","text":"Allocates and assigns a data buffer for a specified channel on the 6000A series. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). buffer ( ndarray | None , default: None ) \u2013 Send a preallocated numpy buffer to be populated. If left as None, this function creates its own buffer. Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffer"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.set_data_buffer_for_enabled_channels","text":"Sets data buffers for enabled channels set by picosdk.set_channel() Parameters: samples ( int ) \u2013 The sample buffer or size to allocate. segment ( int , default: 0 ) \u2013 The memory segment index. datatype ( DATA_TYPE , default: INT16_T ) \u2013 The data type used for the buffer. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 The ratio mode (e.g., RAW, AVERAGE). clear_buffer ( bool , default: True ) \u2013 If True, clear the buffer first captures ( int , default: 0 ) \u2013 If larger than 0, it will create multiple buffers for RAPID mode. Returns: dict ( dict ) \u2013 A dictionary mapping each channel to its associated data buffer.","title":"set_data_buffer_for_enabled_channels"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.set_data_buffer_rapid_capture","text":"Allocates and assigns multiple data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffer_rapid_capture"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.set_data_buffers","text":"Allocate and assign max and min NumPy-backed data buffers. Parameters: channel ( int ) \u2013 The channel to associate the buffers with. samples ( int ) \u2013 Number of samples to allocate. segment ( int , default: 0 ) \u2013 Memory segment to use. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: AGGREGATE ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer. buffers ( ndarray | None , default: None ) \u2013 Send preallocated 2D numpy buffers to be populated. Min buffer first, followed by max buffer. If left as None, this function creates its own buffers. Returns: tuple [ ndarray , ndarray ] \u2013 tuple[np.ndarray, np.ndarray]: Tuple of (buffer_min, buffer_max) NumPy arrays. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffers"},{"location":"ref/psospa/buffers/#pypicosdk.pypicosdk.psospa.set_data_buffers_rapid_capture","text":"Allocate and assign max and min NumPy-backed data buffers for rapid block capture on a specified channel. Parameters: channel ( int ) \u2013 The channel to associate the buffer with (e.g., CHANNEL.A). samples ( int ) \u2013 Number of samples to allocate in the buffer. captures ( int ) \u2013 Number of rapid block captures segment ( int , default: 0 ) \u2013 Memory segment to start at. datatype ( DATA_TYPE , default: INT16_T ) \u2013 C data type for the buffer (e.g., INT16_T). ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. action ( ACTION , default: CLEAR_ALL | ADD ) \u2013 Action to apply to the data buffer (e.g., CLEAR_ALL | ADD). Returns: ndarray | None \u2013 np.array | None: The allocated buffer or None when clearing existing buffers. Raises: PicoSDKException \u2013 If an unsupported data type is provided.","title":"set_data_buffers_rapid_capture"},{"location":"ref/psospa/captures/","text":"Capture Configuration Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_no_of_captures Return the number of captures configured for rapid block. get_no_of_processed_captures Return the number of captures processed in rapid block mode. set_no_of_captures Configure the number of captures for rapid block mode. get_no_of_captures() Return the number of captures configured for rapid block. get_no_of_processed_captures() Return the number of captures processed in rapid block mode. set_no_of_captures(n_captures) Configure the number of captures for rapid block mode.","title":"Capture Configuration"},{"location":"ref/psospa/captures/#capture-configuration","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_no_of_captures Return the number of captures configured for rapid block. get_no_of_processed_captures Return the number of captures processed in rapid block mode. set_no_of_captures Configure the number of captures for rapid block mode.","title":"Capture Configuration"},{"location":"ref/psospa/captures/#pypicosdk.pypicosdk.psospa.get_no_of_captures","text":"Return the number of captures configured for rapid block.","title":"get_no_of_captures"},{"location":"ref/psospa/captures/#pypicosdk.pypicosdk.psospa.get_no_of_processed_captures","text":"Return the number of captures processed in rapid block mode.","title":"get_no_of_processed_captures"},{"location":"ref/psospa/captures/#pypicosdk.pypicosdk.psospa.set_no_of_captures","text":"Configure the number of captures for rapid block mode.","title":"set_no_of_captures"},{"location":"ref/psospa/channel/","text":"Channel Configuration Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_adc_limits Gets the ADC limits for specified devices. get_analogue_offset_limits Get the allowed analogue offset range for range and coupling . report_all_channels_overvoltage_trip_status Return the overvoltage trip status for each channel. reset_channels_and_report_all_channels_overvoltage_trip_status Reset channels and return overvoltage trip status for each. set_all_channels_off Turns all channels off, based on unit number of channels set_channel Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. set_channel_off Sets a channel to OFF (6000E) set_channel_on Enable and configure a specific channel on the device with given parameters. get_adc_limits() Gets the ADC limits for specified devices. Currently tested on: 6000a. Returns: tuple ( tuple ) \u2013 (minimum value, maximum value) Raises: PicoSDKException \u2013 If device hasn't been initialized. get_analogue_offset_limits(range, coupling) Get the allowed analogue offset range for range and coupling . report_all_channels_overvoltage_trip_status() Return the overvoltage trip status for each channel. This wraps ps6000aReportAllChannelsOvervoltageTripStatus to query whether any channel's 50 \u03a9 input protection has tripped. Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels. reset_channels_and_report_all_channels_overvoltage_trip_status() Reset channels and return overvoltage trip status for each. Wraps ps6000aResetChannelsAndReportAllChannelsOvervoltageTripStatus . Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels. set_all_channels_off() Turns all channels off, based on unit number of channels set_channel(channel, range=RANGE.V1, enabled=True, coupling=COUPLING.DC, offset=0.0, bandwidth=BANDWIDTH_CH.FULL, probe_scale=1.0) Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. For the ps6000a drivers, this combines set_channel_on/off to a single function. Set channel on/off by adding enabled=True/False Parameters: channel ( CHANNEL ) \u2013 Channel to setup. range ( RANGE , default: V1 ) \u2013 Voltage range of channel. enabled ( bool , default: True ) \u2013 Enable or disable channel. coupling ( COUPLING , default: DC ) \u2013 AC/DC/DC 50 Ohm coupling of selected channel. offset ( int , default: 0.0 ) \u2013 Analog offset in volts (V) of selected channel. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth of channel (selected models). probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1). set_channel_off(channel) Sets a channel to OFF (6000E) set_channel_on(channel, range, coupling=COUPLING.DC, offset=0, bandwidth=BANDWIDTH_CH.FULL, range_type=PICO_PROBE_RANGE_INFO.X1_PROBE_NV, probe_scale=1.0) Enable and configure a specific channel on the device with given parameters. Parameters: channel ( CHANNEL ) \u2013 The channel to enable (e.g., CHANNEL.A, CHANNEL.B). range ( RANGE ) \u2013 The input voltage range to set for the channel. coupling ( COUPLING , default: DC ) \u2013 The coupling mode to use (e.g., DC, AC). Defaults to DC. offset ( float , default: 0 ) \u2013 DC offset to apply to the channel input, in volts. Defaults to 0. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth limit setting for the channel. Defaults to full bandwidth. range_type ( PICO_PROBE_RANGE_INFO , default: X1_PROBE_NV ) \u2013 Specifies the probe range type. Defaults to X1 probe (no attenuation). probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1).","title":"Channel Configuration"},{"location":"ref/psospa/channel/#channel-configuration","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_adc_limits Gets the ADC limits for specified devices. get_analogue_offset_limits Get the allowed analogue offset range for range and coupling . report_all_channels_overvoltage_trip_status Return the overvoltage trip status for each channel. reset_channels_and_report_all_channels_overvoltage_trip_status Reset channels and return overvoltage trip status for each. set_all_channels_off Turns all channels off, based on unit number of channels set_channel Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. set_channel_off Sets a channel to OFF (6000E) set_channel_on Enable and configure a specific channel on the device with given parameters.","title":"Channel Configuration"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.get_adc_limits","text":"Gets the ADC limits for specified devices. Currently tested on: 6000a. Returns: tuple ( tuple ) \u2013 (minimum value, maximum value) Raises: PicoSDKException \u2013 If device hasn't been initialized.","title":"get_adc_limits"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.get_analogue_offset_limits","text":"Get the allowed analogue offset range for range and coupling .","title":"get_analogue_offset_limits"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.report_all_channels_overvoltage_trip_status","text":"Return the overvoltage trip status for each channel. This wraps ps6000aReportAllChannelsOvervoltageTripStatus to query whether any channel's 50 \u03a9 input protection has tripped. Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels.","title":"report_all_channels_overvoltage_trip_status"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.reset_channels_and_report_all_channels_overvoltage_trip_status","text":"Reset channels and return overvoltage trip status for each. Wraps ps6000aResetChannelsAndReportAllChannelsOvervoltageTripStatus . Returns: list[PICO_CHANNEL_OVERVOLTAGE_TRIPPED]: Trip status for all channels.","title":"reset_channels_and_report_all_channels_overvoltage_trip_status"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.set_all_channels_off","text":"Turns all channels off, based on unit number of channels","title":"set_all_channels_off"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.set_channel","text":"Enable/disable a channel and specify certain variables i.e. range, coupling, offset, etc. For the ps6000a drivers, this combines set_channel_on/off to a single function. Set channel on/off by adding enabled=True/False Parameters: channel ( CHANNEL ) \u2013 Channel to setup. range ( RANGE , default: V1 ) \u2013 Voltage range of channel. enabled ( bool , default: True ) \u2013 Enable or disable channel. coupling ( COUPLING , default: DC ) \u2013 AC/DC/DC 50 Ohm coupling of selected channel. offset ( int , default: 0.0 ) \u2013 Analog offset in volts (V) of selected channel. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth of channel (selected models). probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1).","title":"set_channel"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.set_channel_off","text":"Sets a channel to OFF (6000E)","title":"set_channel_off"},{"location":"ref/psospa/channel/#pypicosdk.pypicosdk.psospa.set_channel_on","text":"Enable and configure a specific channel on the device with given parameters. Parameters: channel ( CHANNEL ) \u2013 The channel to enable (e.g., CHANNEL.A, CHANNEL.B). range ( RANGE ) \u2013 The input voltage range to set for the channel. coupling ( COUPLING , default: DC ) \u2013 The coupling mode to use (e.g., DC, AC). Defaults to DC. offset ( float , default: 0 ) \u2013 DC offset to apply to the channel input, in volts. Defaults to 0. bandwidth ( BANDWIDTH_CH , default: FULL ) \u2013 Bandwidth limit setting for the channel. Defaults to full bandwidth. range_type ( PICO_PROBE_RANGE_INFO , default: X1_PROBE_NV ) \u2013 Specifies the probe range type. Defaults to X1 probe (no attenuation). probe_scale ( float , default: 1.0 ) \u2013 Probe attenuation factor e.g. 10 for x10 probe. Default value of 1.0 (x1).","title":"set_channel_on"},{"location":"ref/psospa/conversions/","text":"Built-in Conversions These functions are general functions to convert data to another format. This is particularly useful for converting ADC data to mV or calculating the needed timebase for your PicoScope. As the conversions talk to the PicoScope to retrieve the resolution and ADC limits, the PicoScope needs to be initialized using scope.open_unit() followed by the conversion. Example >>> import pypicosdk as psdk >>> scope = psdk.psospa() >>> scope.open_unit(resolution=psdk.RESOLUTION._8BIT) >>> scope.mv_to_adc(100, channel=psdk.CHANNEL.A) 3251 >>> scope.close_unit() Reference Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description adc_to_mv Converts ADC values into millivolt (mV) values. adc_to_volts Converts ADC values into voltage (V) values. interval_to_timebase Converts a time interval (between samples) into a PicoScope timebase mv_to_adc Converts a millivolt (mV) value to an ADC value based on the device's sample_rate_to_timebase Converts sample rate to a PicoScope timebase value based on the volts_to_adc Coverts a volt (V) value to an ADC value based on the channel range and device's maximum adc_to_mv(data, channel=None) Converts ADC values into millivolt (mV) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into millivolts (mV) adc_to_volts(data, channel=None) Converts ADC values into voltage (V) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into volts (V) interval_to_timebase(interval, unit=TIME_UNIT.S) Converts a time interval (between samples) into a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: interval ( float ) \u2013 Desired time interval between samples unit ( TIME_UNIT , default: S ) \u2013 Time unit of interval. mv_to_adc(mv, channel) Converts a millivolt (mV) value to an ADC value based on the device's maximum ADC range. Parameters: mv ( float ) \u2013 Voltage in millivolts (mV) to be converted. channel ( CHANNEL ) \u2013 Channel associated with mv . The probe scaling for the channel will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input millivolt value. sample_rate_to_timebase(sample_rate, unit=SAMPLE_RATE.MSPS) Converts sample rate to a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: sample_rate ( int ) \u2013 Desired sample rate unit ( SAMPLE_RATE , default: MSPS ) \u2013 unit of sample rate. volts_to_adc(volts, channel) Coverts a volt (V) value to an ADC value based on the channel range and device's maximum ADC value. Parameters: volts ( float ) \u2013 Voltage in volts (V) to be converted channel ( CHANNEL ) \u2013 Channel associated with volts . The probe scaling will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input voltage.","title":"Built-in Conversions"},{"location":"ref/psospa/conversions/#built-in-conversions","text":"These functions are general functions to convert data to another format. This is particularly useful for converting ADC data to mV or calculating the needed timebase for your PicoScope. As the conversions talk to the PicoScope to retrieve the resolution and ADC limits, the PicoScope needs to be initialized using scope.open_unit() followed by the conversion.","title":"Built-in Conversions"},{"location":"ref/psospa/conversions/#example","text":">>> import pypicosdk as psdk >>> scope = psdk.psospa() >>> scope.open_unit(resolution=psdk.RESOLUTION._8BIT) >>> scope.mv_to_adc(100, channel=psdk.CHANNEL.A) 3251 >>> scope.close_unit()","title":"Example"},{"location":"ref/psospa/conversions/#reference","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description adc_to_mv Converts ADC values into millivolt (mV) values. adc_to_volts Converts ADC values into voltage (V) values. interval_to_timebase Converts a time interval (between samples) into a PicoScope timebase mv_to_adc Converts a millivolt (mV) value to an ADC value based on the device's sample_rate_to_timebase Converts sample rate to a PicoScope timebase value based on the volts_to_adc Coverts a volt (V) value to an ADC value based on the channel range and device's maximum","title":"Reference"},{"location":"ref/psospa/conversions/#pypicosdk.pypicosdk.psospa.adc_to_mv","text":"Converts ADC values into millivolt (mV) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into millivolts (mV)","title":"adc_to_mv"},{"location":"ref/psospa/conversions/#pypicosdk.pypicosdk.psospa.adc_to_volts","text":"Converts ADC values into voltage (V) values. The data can be from a channel buffer (dict), numpy array or single value. Parameters: data ( ( dict , int , float , ndarray ) ) \u2013 ADC values to be converted to millivolt values channel ( ( int , CHANNEL , str ) , default: None ) \u2013 Channel the ADC data is from. If the data is a channel buffer dict, set to None. Defaults to None. Returns: dict | float | ndarray \u2013 dict, int, float, np.ndarray: Data converted into volts (V)","title":"adc_to_volts"},{"location":"ref/psospa/conversions/#pypicosdk.pypicosdk.psospa.interval_to_timebase","text":"Converts a time interval (between samples) into a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: interval ( float ) \u2013 Desired time interval between samples unit ( TIME_UNIT , default: S ) \u2013 Time unit of interval.","title":"interval_to_timebase"},{"location":"ref/psospa/conversions/#pypicosdk.pypicosdk.psospa.mv_to_adc","text":"Converts a millivolt (mV) value to an ADC value based on the device's maximum ADC range. Parameters: mv ( float ) \u2013 Voltage in millivolts (mV) to be converted. channel ( CHANNEL ) \u2013 Channel associated with mv . The probe scaling for the channel will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input millivolt value.","title":"mv_to_adc"},{"location":"ref/psospa/conversions/#pypicosdk.pypicosdk.psospa.sample_rate_to_timebase","text":"Converts sample rate to a PicoScope timebase value based on the attached PicoScope. This function will return the closest possible timebase. Use get_nearest_sample_interval(interval_s) to get the full timebase and actual interval achieved. Parameters: sample_rate ( int ) \u2013 Desired sample rate unit ( SAMPLE_RATE , default: MSPS ) \u2013 unit of sample rate.","title":"sample_rate_to_timebase"},{"location":"ref/psospa/conversions/#pypicosdk.pypicosdk.psospa.volts_to_adc","text":"Coverts a volt (V) value to an ADC value based on the channel range and device's maximum ADC value. Parameters: volts ( float ) \u2013 Voltage in volts (V) to be converted channel ( CHANNEL ) \u2013 Channel associated with volts . The probe scaling will be applied if provided. Returns: int ( int ) \u2013 ADC value corresponding to the input voltage.","title":"volts_to_adc"},{"location":"ref/psospa/digital/","text":"Digital Port Control Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description set_digital_port_off Disable a digital port using ps6000aSetDigitalPortOff . set_digital_port_on Enable a digital port using ps6000aSetDigitalPortOn . set_pulse_width_digital_port_properties Configure digital port properties for pulse-width triggering. set_digital_port_off(port) Disable a digital port using ps6000aSetDigitalPortOff . set_digital_port_on(port, logic_threshold_level, hysteresis) Enable a digital port using ps6000aSetDigitalPortOn . Parameters: port ( DIGITAL_PORT ) \u2013 Digital port to enable. logic_threshold_level ( list [ int ] ) \u2013 Threshold level for each pin in millivolts. hysteresis ( DIGITAL_PORT_HYSTERESIS ) \u2013 Hysteresis level applied to all pins. set_pulse_width_digital_port_properties(port, directions) Configure digital port properties for pulse-width triggering. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration.","title":"Digital Port Control"},{"location":"ref/psospa/digital/#digital-port-control","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description set_digital_port_off Disable a digital port using ps6000aSetDigitalPortOff . set_digital_port_on Enable a digital port using ps6000aSetDigitalPortOn . set_pulse_width_digital_port_properties Configure digital port properties for pulse-width triggering.","title":"Digital Port Control"},{"location":"ref/psospa/digital/#pypicosdk.pypicosdk.psospa.set_digital_port_off","text":"Disable a digital port using ps6000aSetDigitalPortOff .","title":"set_digital_port_off"},{"location":"ref/psospa/digital/#pypicosdk.pypicosdk.psospa.set_digital_port_on","text":"Enable a digital port using ps6000aSetDigitalPortOn . Parameters: port ( DIGITAL_PORT ) \u2013 Digital port to enable. logic_threshold_level ( list [ int ] ) \u2013 Threshold level for each pin in millivolts. hysteresis ( DIGITAL_PORT_HYSTERESIS ) \u2013 Hysteresis level applied to all pins.","title":"set_digital_port_on"},{"location":"ref/psospa/digital/#pypicosdk.pypicosdk.psospa.set_pulse_width_digital_port_properties","text":"Configure digital port properties for pulse-width triggering. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration.","title":"set_pulse_width_digital_port_properties"},{"location":"ref/psospa/firmware/","text":"Firmware / Updates Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description check_for_update Query whether a firmware update is available for the device. start_firmware_update Begin installing any available firmware update. check_for_update(n_infos=8) Query whether a firmware update is available for the device. Args: n_infos: Size of the firmware information buffer. Returns: tuple[list, bool]: (firmware_info, updates_required) where firmware_info is a list of :class: PICO_FIRMWARE_INFO structures and updates_required indicates whether any firmware components require updating. start_firmware_update(progress=None) Begin installing any available firmware update. Args: progress: Optional callback (handle, percent) that receives progress updates as the firmware is written.","title":"Firmware / Updates"},{"location":"ref/psospa/firmware/#firmware-updates","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description check_for_update Query whether a firmware update is available for the device. start_firmware_update Begin installing any available firmware update.","title":"Firmware / Updates"},{"location":"ref/psospa/firmware/#pypicosdk.pypicosdk.psospa.check_for_update","text":"Query whether a firmware update is available for the device. Args: n_infos: Size of the firmware information buffer. Returns: tuple[list, bool]: (firmware_info, updates_required) where firmware_info is a list of :class: PICO_FIRMWARE_INFO structures and updates_required indicates whether any firmware components require updating.","title":"check_for_update"},{"location":"ref/psospa/firmware/#pypicosdk.pypicosdk.psospa.start_firmware_update","text":"Begin installing any available firmware update. Args: progress: Optional callback (handle, percent) that receives progress updates as the firmware is written.","title":"start_firmware_update"},{"location":"ref/psospa/init/","text":"Initializing psospa Setup The psospa drivers are intended for PicoScope 3000E Series. Quickstart Code To get started, use the following code: import pypicosdk as psdk scope = psdk.psospa() scope.open_unit() # Print scope serial (Optional) print(scope.get_unit_serial()) # Do something here scope.close_unit() Troubleshooting 3000E needs USB-C Power Delivery (PD) or standard USB and the supplied USB-C power supply.","title":"Initializing psospa"},{"location":"ref/psospa/init/#initializing-psospa","text":"","title":"Initializing psospa"},{"location":"ref/psospa/init/#setup","text":"The psospa drivers are intended for PicoScope 3000E Series.","title":"Setup"},{"location":"ref/psospa/init/#quickstart-code","text":"To get started, use the following code: import pypicosdk as psdk scope = psdk.psospa() scope.open_unit() # Print scope serial (Optional) print(scope.get_unit_serial()) # Do something here scope.close_unit()","title":"Quickstart Code"},{"location":"ref/psospa/init/#troubleshooting","text":"3000E needs USB-C Power Delivery (PD) or standard USB and the supplied USB-C power supply.","title":"Troubleshooting"},{"location":"ref/psospa/led/","text":"LED Control The LED's on the 3000E are controllable via hue, saturation and brightness. To control them these rules need to be met: To control each LED set_led_states([led], 'on') must be called first per LED. Here is an example of the three different methods of changing the LEDs import pypicosdk as psdk import time scope = psdk.psospa() scope.open_unit() # Set channel A to red (hue=0, sat=100) scope.set_led_states('A', 'on') scope.set_led_colours('A', 0, 100) time.sleep(2) # OR set A, B and C to red, green and blue (sat=100) scope.set_led_states(['A', 'B', 'C'], ['on', 'on', 'on']) scope.set_led_colours(['A', 'B', 'C'], ['red', 'green', 'blue'], [100, 100, 100]) time.sleep(2) # or set all LEDs to pink. scope.set_all_led_states('on') scope.set_all_led_colours('pink') input('Waiting for user... ') The LEDs are controlled via the functions below: Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description set_all_led_colours Sets all LED's on the PicoScope to a single colour set_all_led_states Sets the state of all LED's on the PicoScope. set_led_brightness Set the brightness of all configurable LEDs. set_led_colours Sets the colour of the selected LED using HUE and Saturation set_led_states Sets the state for a selected LED. Between default behaviour (auto), set_all_led_colours(hue, saturation=100) Sets all LED's on the PicoScope to a single colour Parameters: hue ( int | str ) \u2013 Colour as a hue in [0-359] or a basic colour from the following: ['red', 'green', 'blue', 'yellow', 'pink'] saturation ( int , default: 100 ) \u2013 Saturation of the colour [0-100]. Defaults to 100. set_all_led_states(state) Sets the state of all LED's on the PicoScope. Parameters: state ( str ) \u2013 ['auto', 'on', 'off'] set_led_brightness(brightness) Set the brightness of all configurable LEDs. It will not take affect until one of the following functions are ran: - run_block_capture() - run_streaming() - set_aux_io_mode() - siggen_apply() Parameters: brightness ( int ) \u2013 Brightness percentage [0 - 100] set_led_colours(led, hue, saturation) Sets the colour of the selected LED using HUE and Saturation It will not take affect until one of the following functions are ran: - run_block_capture() - run_streaming() - set_aux_io_mode() - siggen_apply() Parameters: led ( str | list [ str ] ) \u2013 The selected LED. Must be one or a list of these values: 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'AWG' , 'AUX' . hue ( int | list [ int ] ) \u2013 Colour as a hue in [0-359] or a basic colour from the following: ['red', 'green', 'blue', 'yellow', 'pink'] saturation ( int | list [ int ] ) \u2013 Saturation of the LED, [0-100]. set_led_states(led, state) Sets the state for a selected LED. Between default behaviour (auto), on or off. Parameters: led ( str ) \u2013 The selected LED. Must be one of these values: 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'AWG' , 'AUX' . state ( str ) \u2013 State of selected LED: 'auto' , 'off' , 'on' .","title":"LED Control"},{"location":"ref/psospa/led/#led-control","text":"The LED's on the 3000E are controllable via hue, saturation and brightness. To control them these rules need to be met: To control each LED set_led_states([led], 'on') must be called first per LED. Here is an example of the three different methods of changing the LEDs import pypicosdk as psdk import time scope = psdk.psospa() scope.open_unit() # Set channel A to red (hue=0, sat=100) scope.set_led_states('A', 'on') scope.set_led_colours('A', 0, 100) time.sleep(2) # OR set A, B and C to red, green and blue (sat=100) scope.set_led_states(['A', 'B', 'C'], ['on', 'on', 'on']) scope.set_led_colours(['A', 'B', 'C'], ['red', 'green', 'blue'], [100, 100, 100]) time.sleep(2) # or set all LEDs to pink. scope.set_all_led_states('on') scope.set_all_led_colours('pink') input('Waiting for user... ') The LEDs are controlled via the functions below: Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description set_all_led_colours Sets all LED's on the PicoScope to a single colour set_all_led_states Sets the state of all LED's on the PicoScope. set_led_brightness Set the brightness of all configurable LEDs. set_led_colours Sets the colour of the selected LED using HUE and Saturation set_led_states Sets the state for a selected LED. Between default behaviour (auto),","title":"LED Control"},{"location":"ref/psospa/led/#pypicosdk.pypicosdk.psospa.set_all_led_colours","text":"Sets all LED's on the PicoScope to a single colour Parameters: hue ( int | str ) \u2013 Colour as a hue in [0-359] or a basic colour from the following: ['red', 'green', 'blue', 'yellow', 'pink'] saturation ( int , default: 100 ) \u2013 Saturation of the colour [0-100]. Defaults to 100.","title":"set_all_led_colours"},{"location":"ref/psospa/led/#pypicosdk.pypicosdk.psospa.set_all_led_states","text":"Sets the state of all LED's on the PicoScope. Parameters: state ( str ) \u2013 ['auto', 'on', 'off']","title":"set_all_led_states"},{"location":"ref/psospa/led/#pypicosdk.pypicosdk.psospa.set_led_brightness","text":"Set the brightness of all configurable LEDs. It will not take affect until one of the following functions are ran: - run_block_capture() - run_streaming() - set_aux_io_mode() - siggen_apply() Parameters: brightness ( int ) \u2013 Brightness percentage [0 - 100]","title":"set_led_brightness"},{"location":"ref/psospa/led/#pypicosdk.pypicosdk.psospa.set_led_colours","text":"Sets the colour of the selected LED using HUE and Saturation It will not take affect until one of the following functions are ran: - run_block_capture() - run_streaming() - set_aux_io_mode() - siggen_apply() Parameters: led ( str | list [ str ] ) \u2013 The selected LED. Must be one or a list of these values: 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'AWG' , 'AUX' . hue ( int | list [ int ] ) \u2013 Colour as a hue in [0-359] or a basic colour from the following: ['red', 'green', 'blue', 'yellow', 'pink'] saturation ( int | list [ int ] ) \u2013 Saturation of the LED, [0-100].","title":"set_led_colours"},{"location":"ref/psospa/led/#pypicosdk.pypicosdk.psospa.set_led_states","text":"Sets the state for a selected LED. Between default behaviour (auto), on or off. Parameters: led ( str ) \u2013 The selected LED. Must be one of these values: 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'AWG' , 'AUX' . state ( str ) \u2013 State of selected LED: 'auto' , 'off' , 'on' .","title":"set_led_states"},{"location":"ref/psospa/retrieval/","text":"Data Retrieval Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_scaling_values Return probe scaling factors for each channel. get_time_axis Return an array of time values based on the timebase and number get_values Retrieves a block of captured samples from the device once it's ready. get_values_bulk Retrieve data from multiple memory segments. get_values_bulk_async Begin asynchronous retrieval of values from multiple segments. get_values_overlapped Retrieve overlapped data from multiple segments for block or rapid block mode. is_over_range Logs and prints a warning if any channel has been over range. is_ready Blocks execution until the PicoScope device is ready. no_of_streaming_values Return the number of values currently available while streaming. stop_using_get_values_overlapped Terminate overlapped capture mode. get_scaling_values(n_channels=8) Return probe scaling factors for each channel. Args: n_channels: Number of channel entries to retrieve. Returns: list[PICO_SCALING_FACTORS_VALUES]: Scaling factors for n_channels channels. get_time_axis(timebase, samples, pre_trig_percent=None, unit='ns', ratio=0) Return an array of time values based on the timebase and number of samples Parameters: timebase ( int ) \u2013 PicoScope timebase samples ( int ) \u2013 Number of samples captured pre_trig_percent ( int , default: None ) \u2013 Percent to offset the 0 point by. If None, defaults to last used pre_trig_percent or 50. unit ( str , default: 'ns' ) \u2013 Unit of seconds the time axis is returned in. Default is 'ns' (nanoseconds). ratio ( int , default: 0 ) \u2013 If using a downsampling ratio, this will scale the time interval to reflect the reduced samples. Returns: ndarray \u2013 np.ndarray: Array of time values in nano-seconds get_values(samples, start_index=0, segment=0, ratio=0, ratio_mode=RATIO_MODE.RAW) Retrieves a block of captured samples from the device once it's ready. If a channel goes over-range a warning will appear. This function should be called after confirming the device is ready using is_ready() . It invokes the underlying PicoSDK GetValues function to read the data into memory. Parameters: samples ( int ) \u2013 Number of samples to retrieve. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. segment ( int , default: 0 ) \u2013 Memory segment index to retrieve data from. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Ratio mode for downsampling. Returns: int ( int ) \u2013 Actual number of samples retrieved. get_values_bulk(start_index, no_of_samples, from_segment_index, to_segment_index, down_sample_ratio, down_sample_ratio_mode) Retrieve data from multiple memory segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Total number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment. If this value is less than from_segment_index the driver wraps around. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . Returns: int \u2013 tuple[int, list[list[str]]]: (samples, overflow)list) where samples is the list [ list [ str ]] \u2013 number of samples copied and overflow is list of captures with where tuple [ int , list [ list [ str ]]] \u2013 channnels have exceeded their voltage range. get_values_bulk_async(start_index, no_of_samples, from_segment_index, to_segment_index, down_sample_ratio, down_sample_ratio_mode, lp_data_ready, p_parameter) Begin asynchronous retrieval of values from multiple segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment in the range. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . lp_data_ready ( POINTER ) \u2013 Callback invoked when data is available. The callback signature should be callback(handle, status, n_samples, overflow) . p_parameter ( POINTER ) \u2013 User parameter passed through to lp_data_ready . get_values_overlapped(start_index, no_of_samples, down_sample_ratio, down_sample_ratio_mode, from_segment_index, to_segment_index, overflow) Retrieve overlapped data from multiple segments for block or rapid block mode. Call this method before :meth: run_block_capture to defer the data retrieval request. The driver validates and performs the request when :meth: run_block_capture runs, which avoids the extra communication that occurs when calling :meth: run_block_capture followed by :meth: get_values . After the capture completes you can call :meth: get_values again to retrieve additional copies of the data. Stop further captures with :meth: stop_using_get_values_overlapped and check progress using :meth: ps6000a.PicoScope.get_no_of_processed_captures . Parameters: start_index ( int ) \u2013 Index within the circular buffer to begin reading from. no_of_samples ( int ) \u2013 Number of samples to copy from each segment. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . from_segment_index ( int ) \u2013 First segment index to read. to_segment_index ( int ) \u2013 Last segment index to read. overflow ( c_int16 ) \u2013 ctypes.c_int16 instance that receives any overflow flags. Returns: int ( int ) \u2013 Actual number of samples copied from each segment. Examples: >>> samples = scope.get_values_overlapped( ... start_index=0, # read from start of buffer ... no_of_samples=1024, # copy 1024 samples ... down_sample_ratio=1, # no downsampling ... down_sample_ratio_mode=RATIO_MODE.RAW, ... from_segment_index=0, # first segment only ... to_segment_index=0, ... ) >>> scope.run_block_capture(timebase=1, samples=1024) >>> data = scope.get_values(samples=1024) >>> samples, scope.over_range (1024, 0) is_over_range() Logs and prints a warning if any channel has been over range. The :attr: over_range attribute stores a bit mask updated by data retrieval methods like :meth: get_values and :meth: get_values_overlapped . Calling this method logs a warning if any channel went over range and returns a list of the affected channel names. Returns: list ( list ) \u2013 List of channels that have been over range is_ready() Blocks execution until the PicoScope device is ready. Continuously calls the PicoSDK IsReady function in a loop, checking if the device is prepared to proceed with data acquisition. Returns: None \u2013 None no_of_streaming_values() Return the number of values currently available while streaming. stop_using_get_values_overlapped() Terminate overlapped capture mode. Call this when overlapped captures are complete to release any resources allocated by :meth: get_values_overlapped .","title":"Data Retrieval"},{"location":"ref/psospa/retrieval/#data-retrieval","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_scaling_values Return probe scaling factors for each channel. get_time_axis Return an array of time values based on the timebase and number get_values Retrieves a block of captured samples from the device once it's ready. get_values_bulk Retrieve data from multiple memory segments. get_values_bulk_async Begin asynchronous retrieval of values from multiple segments. get_values_overlapped Retrieve overlapped data from multiple segments for block or rapid block mode. is_over_range Logs and prints a warning if any channel has been over range. is_ready Blocks execution until the PicoScope device is ready. no_of_streaming_values Return the number of values currently available while streaming. stop_using_get_values_overlapped Terminate overlapped capture mode.","title":"Data Retrieval"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.get_scaling_values","text":"Return probe scaling factors for each channel. Args: n_channels: Number of channel entries to retrieve. Returns: list[PICO_SCALING_FACTORS_VALUES]: Scaling factors for n_channels channels.","title":"get_scaling_values"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.get_time_axis","text":"Return an array of time values based on the timebase and number of samples Parameters: timebase ( int ) \u2013 PicoScope timebase samples ( int ) \u2013 Number of samples captured pre_trig_percent ( int , default: None ) \u2013 Percent to offset the 0 point by. If None, defaults to last used pre_trig_percent or 50. unit ( str , default: 'ns' ) \u2013 Unit of seconds the time axis is returned in. Default is 'ns' (nanoseconds). ratio ( int , default: 0 ) \u2013 If using a downsampling ratio, this will scale the time interval to reflect the reduced samples. Returns: ndarray \u2013 np.ndarray: Array of time values in nano-seconds","title":"get_time_axis"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.get_values","text":"Retrieves a block of captured samples from the device once it's ready. If a channel goes over-range a warning will appear. This function should be called after confirming the device is ready using is_ready() . It invokes the underlying PicoSDK GetValues function to read the data into memory. Parameters: samples ( int ) \u2013 Number of samples to retrieve. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. segment ( int , default: 0 ) \u2013 Memory segment index to retrieve data from. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Ratio mode for downsampling. Returns: int ( int ) \u2013 Actual number of samples retrieved.","title":"get_values"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.get_values_bulk","text":"Retrieve data from multiple memory segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Total number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment. If this value is less than from_segment_index the driver wraps around. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . Returns: int \u2013 tuple[int, list[list[str]]]: (samples, overflow)list) where samples is the list [ list [ str ]] \u2013 number of samples copied and overflow is list of captures with where tuple [ int , list [ list [ str ]]] \u2013 channnels have exceeded their voltage range.","title":"get_values_bulk"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.get_values_bulk_async","text":"Begin asynchronous retrieval of values from multiple segments. Parameters: start_index ( int ) \u2013 Index within each segment to begin copying from. no_of_samples ( int ) \u2013 Number of samples to read from each segment. from_segment_index ( int ) \u2013 Index of the first segment to read. to_segment_index ( int ) \u2013 Index of the last segment in the range. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply before copying. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . lp_data_ready ( POINTER ) \u2013 Callback invoked when data is available. The callback signature should be callback(handle, status, n_samples, overflow) . p_parameter ( POINTER ) \u2013 User parameter passed through to lp_data_ready .","title":"get_values_bulk_async"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.get_values_overlapped","text":"Retrieve overlapped data from multiple segments for block or rapid block mode. Call this method before :meth: run_block_capture to defer the data retrieval request. The driver validates and performs the request when :meth: run_block_capture runs, which avoids the extra communication that occurs when calling :meth: run_block_capture followed by :meth: get_values . After the capture completes you can call :meth: get_values again to retrieve additional copies of the data. Stop further captures with :meth: stop_using_get_values_overlapped and check progress using :meth: ps6000a.PicoScope.get_no_of_processed_captures . Parameters: start_index ( int ) \u2013 Index within the circular buffer to begin reading from. no_of_samples ( int ) \u2013 Number of samples to copy from each segment. down_sample_ratio ( int ) \u2013 Downsampling ratio to apply. down_sample_ratio_mode ( int ) \u2013 Downsampling mode from :class: RATIO_MODE . from_segment_index ( int ) \u2013 First segment index to read. to_segment_index ( int ) \u2013 Last segment index to read. overflow ( c_int16 ) \u2013 ctypes.c_int16 instance that receives any overflow flags. Returns: int ( int ) \u2013 Actual number of samples copied from each segment. Examples: >>> samples = scope.get_values_overlapped( ... start_index=0, # read from start of buffer ... no_of_samples=1024, # copy 1024 samples ... down_sample_ratio=1, # no downsampling ... down_sample_ratio_mode=RATIO_MODE.RAW, ... from_segment_index=0, # first segment only ... to_segment_index=0, ... ) >>> scope.run_block_capture(timebase=1, samples=1024) >>> data = scope.get_values(samples=1024) >>> samples, scope.over_range (1024, 0)","title":"get_values_overlapped"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.is_over_range","text":"Logs and prints a warning if any channel has been over range. The :attr: over_range attribute stores a bit mask updated by data retrieval methods like :meth: get_values and :meth: get_values_overlapped . Calling this method logs a warning if any channel went over range and returns a list of the affected channel names. Returns: list ( list ) \u2013 List of channels that have been over range","title":"is_over_range"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.is_ready","text":"Blocks execution until the PicoScope device is ready. Continuously calls the PicoSDK IsReady function in a loop, checking if the device is prepared to proceed with data acquisition. Returns: None \u2013 None","title":"is_ready"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.no_of_streaming_values","text":"Return the number of values currently available while streaming.","title":"no_of_streaming_values"},{"location":"ref/psospa/retrieval/#pypicosdk.pypicosdk.psospa.stop_using_get_values_overlapped","text":"Terminate overlapped capture mode. Call this when overlapped captures are complete to release any resources allocated by :meth: get_values_overlapped .","title":"stop_using_get_values_overlapped"},{"location":"ref/psospa/run/","text":"Data Acquisition: Block & Streaming Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description run_block_capture Runs a block capture using the specified timebase and number of samples. run_simple_block_capture Perform a complete single block capture. run_simple_rapid_block_capture Run a rapid block capture with X amount of captures/frames/waveforms run_streaming Begin a streaming capture. stop Stop data acquisition on the device. run_block_capture(timebase, samples, pre_trig_percent=None, segment=0) Runs a block capture using the specified timebase and number of samples. This sets up the PicoScope to begin collecting a block of data, divided into pre-trigger and post-trigger samples. It uses the PicoSDK RunBlock function. Parameters: timebase ( int ) \u2013 Timebase value determining sample interval (refer to PicoSDK guide). samples ( int ) \u2013 Total number of samples to capture. pre_trig_percent ( int | None , default: None ) \u2013 Percentage of samples to capture before the trigger. If None, defaults to last called pre_trig_percent or 50. segment ( int , default: 0 ) \u2013 Memory segment index to use. Returns: int ( int ) \u2013 Estimated time (in milliseconds) the device will be busy capturing data. run_simple_block_capture(timebase, samples, segment=0, start_index=0, datatype=cst.DATA_TYPE.INT16_T, output_unit='mv', time_unit='ns', ratio=0, ratio_mode=cst.RATIO_MODE.RAW, pre_trig_percent=50) Perform a complete single block capture. Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. segment ( int , default: 0 ) \u2013 Memory segment index to use. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: dict [ int , ndarray ] \u2013 tuple[dict[int,np.ndarray],np.ndarray]: Dictionary of channel buffers and the ndarray \u2013 time axis (numpy array). Examples: >>> scope.set_channel(CHANNEL.A, RANGE.V1) >>> scope.set_simple_trigger(CHANNEL.A, threshold_mv=500) >>> buffers = scope.run_simple_block_capture(timebase=3, samples=1000) run_simple_rapid_block_capture(timebase, samples, captures, start_index=0, datatype=cst.DATA_TYPE.INT16_T, output_unit='mv', time_unit='ns', ratio=0, ratio_mode=cst.RATIO_MODE.RAW, pre_trig_percent=50) Run a rapid block capture with X amount of captures/frames/waveforms Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. captures ( int ) \u2013 Number of waveforms to capture. start_index ( int , default: 0 ) \u2013 Starting index in buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: tuple [ dict [ int , ndarray ], ndarray ] \u2013 tuple[dict,np.ndarray]: Dictionary of channel buffers and the time axis (numpy array). run_streaming(sample_interval, time_units, max_pre_trigger_samples, max_post_trigger_samples, auto_stop, ratio, ratio_mode) Begin a streaming capture. This wraps the RunStreaming driver call and configures the acquisition according to the provided arguments. Args: sample_interval: Requested interval between samples. time_units: Unit for sample_interval . max_pre_trigger_samples: Number of pre-trigger samples to collect. max_post_trigger_samples: Number of post-trigger samples to collect. auto_stop: Whether the driver should stop when the buffer is full. ratio: Down sampling ratio. ratio_mode: Down sampling mode. Returns: float: The actual sample interval configured by the driver. stop() Stop data acquisition on the device. Returns: None \u2013 None","title":"Data Acquisition: Block &amp; Streaming"},{"location":"ref/psospa/run/#data-acquisition-block-streaming","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description run_block_capture Runs a block capture using the specified timebase and number of samples. run_simple_block_capture Perform a complete single block capture. run_simple_rapid_block_capture Run a rapid block capture with X amount of captures/frames/waveforms run_streaming Begin a streaming capture. stop Stop data acquisition on the device.","title":"Data Acquisition: Block &amp; Streaming"},{"location":"ref/psospa/run/#pypicosdk.pypicosdk.psospa.run_block_capture","text":"Runs a block capture using the specified timebase and number of samples. This sets up the PicoScope to begin collecting a block of data, divided into pre-trigger and post-trigger samples. It uses the PicoSDK RunBlock function. Parameters: timebase ( int ) \u2013 Timebase value determining sample interval (refer to PicoSDK guide). samples ( int ) \u2013 Total number of samples to capture. pre_trig_percent ( int | None , default: None ) \u2013 Percentage of samples to capture before the trigger. If None, defaults to last called pre_trig_percent or 50. segment ( int , default: 0 ) \u2013 Memory segment index to use. Returns: int ( int ) \u2013 Estimated time (in milliseconds) the device will be busy capturing data.","title":"run_block_capture"},{"location":"ref/psospa/run/#pypicosdk.pypicosdk.psospa.run_simple_block_capture","text":"Perform a complete single block capture. Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. segment ( int , default: 0 ) \u2013 Memory segment index to use. start_index ( int , default: 0 ) \u2013 Starting index in the buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: dict [ int , ndarray ] \u2013 tuple[dict[int,np.ndarray],np.ndarray]: Dictionary of channel buffers and the ndarray \u2013 time axis (numpy array). Examples: >>> scope.set_channel(CHANNEL.A, RANGE.V1) >>> scope.set_simple_trigger(CHANNEL.A, threshold_mv=500) >>> buffers = scope.run_simple_block_capture(timebase=3, samples=1000)","title":"run_simple_block_capture"},{"location":"ref/psospa/run/#pypicosdk.pypicosdk.psospa.run_simple_rapid_block_capture","text":"Run a rapid block capture with X amount of captures/frames/waveforms Parameters: timebase ( int ) \u2013 PicoScope timebase value. samples ( int ) \u2013 Number of samples to capture. captures ( int ) \u2013 Number of waveforms to capture. start_index ( int , default: 0 ) \u2013 Starting index in buffer. datatype ( DATA_TYPE , default: INT16_T ) \u2013 Data type to use for the capture buffer. output_unit ( str , default: 'mv' ) \u2013 Output unit of data, can be ['adc', 'mv', 'v'] Default is 'mv'. time_unit ( str , default: 'ns' ) \u2013 Output unit of the time_axis. Default is 'ns'. ratio ( int , default: 0 ) \u2013 Downsampling ratio. ratio_mode ( RATIO_MODE , default: RAW ) \u2013 Downsampling mode. pre_trig_percent ( int , default: 50 ) \u2013 Percentage of samples to capture before the trigger. Returns: tuple [ dict [ int , ndarray ], ndarray ] \u2013 tuple[dict,np.ndarray]: Dictionary of channel buffers and the time axis (numpy array).","title":"run_simple_rapid_block_capture"},{"location":"ref/psospa/run/#pypicosdk.pypicosdk.psospa.run_streaming","text":"Begin a streaming capture. This wraps the RunStreaming driver call and configures the acquisition according to the provided arguments. Args: sample_interval: Requested interval between samples. time_units: Unit for sample_interval . max_pre_trigger_samples: Number of pre-trigger samples to collect. max_post_trigger_samples: Number of post-trigger samples to collect. auto_stop: Whether the driver should stop when the buffer is full. ratio: Down sampling ratio. ratio_mode: Down sampling mode. Returns: float: The actual sample interval configured by the driver.","title":"run_streaming"},{"location":"ref/psospa/run/#pypicosdk.pypicosdk.psospa.stop","text":"Stop data acquisition on the device. Returns: None \u2013 None","title":"stop"},{"location":"ref/psospa/setup/","text":"Setup / Initialization Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description close_unit Closes the PicoScope device and releases the hardware handle. get_device_resolution Return the currently configured resolution. get_enumerated_units Returns count, serials and serial string length of a specific PicoScope unit. get_unit_info Get specified information from unit. Use UNIT_INFO.XXXX or integer. get_unit_serial Get and return batch and serial of unit. open_unit Opens a connection to a PicoScope unit and retrieves USB power details. ping_unit Check that the device is still connected. set_device_resolution Configure the ADC resolution using ps6000aSetDeviceResolution . close_unit() Closes the PicoScope device and releases the hardware handle. This calls the PicoSDK CloseUnit function to properly disconnect from the device. Returns: None \u2013 None get_device_resolution() Return the currently configured resolution. Returns: :class: RESOLUTION : Device resolution. get_enumerated_units() Returns count, serials and serial string length of a specific PicoScope unit. Returns: int \u2013 Number of devices of this type str \u2013 Comma separated string of all serials int \u2013 Length of string get_unit_info(unit_info) Get specified information from unit. Use UNIT_INFO.XXXX or integer. Parameters: unit_info ( UNIT_INFO ) \u2013 Specify information from PicoScope unit i.e. UNIT_INFO.PICO_BATCH_AND_SERIAL. Returns: str ( str ) \u2013 Returns data from device. get_unit_serial() Get and return batch and serial of unit. Returns: str ( str ) \u2013 Returns serial, e.g., \"JR628/0017\". open_unit(serial_number=None, resolution=0) Opens a connection to a PicoScope unit and retrieves USB power details. Parameters: serial_number ( str , default: None ) \u2013 Serial number of the specific PicoScope unit to open (e.g., \"JR628/0017\"). If None, the first available unit is opened. resolution ( RESOLUTION | resolution_literal , default: 0 ) \u2013 The desired device resolution. Can be a RESOLUTION enum or literal integer. Defaults to 0. Returns: PICO_USB_POWER_DETAILS \u2013 A structure containing USB power information of the opened device. ping_unit() Check that the device is still connected. This wraps ps6000aPingUnit which verifies communication with the PicoScope. If the call succeeds the method returns True . Returns: bool: True if the unit responded. set_device_resolution(resolution) Configure the ADC resolution using ps6000aSetDeviceResolution . Args: resolution: Desired resolution as a :class: RESOLUTION value.","title":"Setup / Initialization"},{"location":"ref/psospa/setup/#setup-initialization","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description close_unit Closes the PicoScope device and releases the hardware handle. get_device_resolution Return the currently configured resolution. get_enumerated_units Returns count, serials and serial string length of a specific PicoScope unit. get_unit_info Get specified information from unit. Use UNIT_INFO.XXXX or integer. get_unit_serial Get and return batch and serial of unit. open_unit Opens a connection to a PicoScope unit and retrieves USB power details. ping_unit Check that the device is still connected. set_device_resolution Configure the ADC resolution using ps6000aSetDeviceResolution .","title":"Setup / Initialization"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.close_unit","text":"Closes the PicoScope device and releases the hardware handle. This calls the PicoSDK CloseUnit function to properly disconnect from the device. Returns: None \u2013 None","title":"close_unit"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.get_device_resolution","text":"Return the currently configured resolution. Returns: :class: RESOLUTION : Device resolution.","title":"get_device_resolution"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.get_enumerated_units","text":"Returns count, serials and serial string length of a specific PicoScope unit. Returns: int \u2013 Number of devices of this type str \u2013 Comma separated string of all serials int \u2013 Length of string","title":"get_enumerated_units"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.get_unit_info","text":"Get specified information from unit. Use UNIT_INFO.XXXX or integer. Parameters: unit_info ( UNIT_INFO ) \u2013 Specify information from PicoScope unit i.e. UNIT_INFO.PICO_BATCH_AND_SERIAL. Returns: str ( str ) \u2013 Returns data from device.","title":"get_unit_info"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.get_unit_serial","text":"Get and return batch and serial of unit. Returns: str ( str ) \u2013 Returns serial, e.g., \"JR628/0017\".","title":"get_unit_serial"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.open_unit","text":"Opens a connection to a PicoScope unit and retrieves USB power details. Parameters: serial_number ( str , default: None ) \u2013 Serial number of the specific PicoScope unit to open (e.g., \"JR628/0017\"). If None, the first available unit is opened. resolution ( RESOLUTION | resolution_literal , default: 0 ) \u2013 The desired device resolution. Can be a RESOLUTION enum or literal integer. Defaults to 0. Returns: PICO_USB_POWER_DETAILS \u2013 A structure containing USB power information of the opened device.","title":"open_unit"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.ping_unit","text":"Check that the device is still connected. This wraps ps6000aPingUnit which verifies communication with the PicoScope. If the call succeeds the method returns True . Returns: bool: True if the unit responded.","title":"ping_unit"},{"location":"ref/psospa/setup/#pypicosdk.pypicosdk.psospa.set_device_resolution","text":"Configure the ADC resolution using ps6000aSetDeviceResolution . Args: resolution: Desired resolution as a :class: RESOLUTION value.","title":"set_device_resolution"},{"location":"ref/psospa/siggen/","text":"Signal Generator Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description set_siggen Configures and applies the signal generator settings. set_siggen_awg Arbitrary Waveform Generation - Generates a signal from a given buffer. siggen_apply Sets the signal generator running using parameters previously configured. siggen_frequency_limits Query frequency sweep limits for the signal generator. siggen_frequency_sweep Configure frequency sweep parameters. siggen_limits Query signal generator parameter limits. siggen_pause Pause the signal generator. siggen_phase Set the signal generator phase using delta_phase . siggen_phase_sweep Configure a phase sweep for the signal generator. siggen_restart Restart the signal generator after a pause. siggen_set_duty_cycle Set duty cycle of SigGen in percentage. siggen_set_frequency Set frequency of SigGen in Hz. siggen_set_range Set mV range of SigGen (6000A). siggen_set_waveform Set waveform type for SigGen (6000A). If arbitrary mode is selected, siggen_software_trigger_control Control software triggering for the signal generator. siggen_trigger Configure signal generator triggering. set_siggen(frequency, pk2pk, wave_type, offset=0.0, duty=50, sweep=False, stop_freq=None, inc_freq=1, dwell_time=0.001, sweep_type=SWEEP_TYPE.UP) Configures and applies the signal generator settings. Sets up the signal generator with the specified waveform type, frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). wave_type ( WAVEFORM ) \u2013 Waveform type (e.g., WAVEFORM.SINE, WAVEFORM.SQUARE). offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). duty ( int or float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1 Hz. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 1 ms. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values. set_siggen_awg(frequency, pk2pk, buffer, offset=0.0, duty=50, sweep=False, stop_freq=None, inc_freq=1, dwell_time=0.001, sweep_type=SWEEP_TYPE.UP) Arbitrary Waveform Generation - Generates a signal from a given buffer. Sets up the signal generator with a specified frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). buffer ( ndarray | list ) \u2013 description offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). Defaults to 0.0. duty ( float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). Defaults to 50. sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 0.001. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Raises: PicoSDKException \u2013 description Returns: dict ( dict ) \u2013 description siggen_apply(enabled=1, sweep_enabled=0, trigger_enabled=0, auto_clock_optimise_enabled=0, override_auto_clock_prescale=0) Sets the signal generator running using parameters previously configured. Parameters: enabled ( int , default: 1 ) \u2013 SigGen Enabled, sweep_enabled ( int , default: 0 ) \u2013 Sweep Enabled, trigger_enabled ( int , default: 0 ) \u2013 SigGen trigger enabled, auto_clock_optimise_enabled ( int , default: 0 ) \u2013 Auto Clock Optimisation, override_auto_clock_prescale ( int , default: 0 ) \u2013 Override Clock Prescale, Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values. siggen_frequency_limits(wave_type, num_samples, start_frequency, sweep_enabled, manual_dac_clock_frequency=None, manual_prescale_ratio=None) Query frequency sweep limits for the signal generator. Args: wave_type: Waveform type. num_samples: Number of samples in the arbitrary waveform buffer. start_frequency: Starting frequency in Hz. sweep_enabled: Whether a sweep is enabled. manual_dac_clock_frequency: Optional manual DAC clock frequency. manual_prescale_ratio: Optional manual DAC prescale ratio. Returns: dict: Frequency limit information with keys max_stop_frequency , min_frequency_step , max_frequency_step , min_dwell_time and max_dwell_time . siggen_frequency_sweep(stop_frequency_hz, frequency_increment, dwell_time_s, sweep_type) Configure frequency sweep parameters. Args: stop_frequency_hz: End frequency of the sweep in Hz. frequency_increment: Increment value in Hz. dwell_time_s: Time to dwell at each frequency in seconds. sweep_type: Sweep direction. siggen_limits(parameter) Query signal generator parameter limits. Args: parameter: Signal generator parameter to query. Returns: dict: Dictionary with keys min , max and step . siggen_pause() Pause the signal generator. siggen_phase(delta_phase) Set the signal generator phase using delta_phase . The signal generator uses direct digital synthesis (DDS) with a 32-bit phase accumulator that indicates the present location in the waveform. The top bits of the phase accumulator are used as an index into a buffer containing the arbitrary waveform. The remaining bits act as the fractional part of the index, enabling highresolution control of output frequency and allowing the generation of lower frequencies. The signal generator steps through the waveform by adding a deltaPhase value between 1 and phaseAccumulatorSize-1 to the phase accumulator every dacPeriod (= 1/dacFrequency). Parameters: delta_phase ( int ) \u2013 Phase offset to apply. siggen_phase_sweep(stop_delta_phase, delta_phase_increment, dwell_count, sweep_type) Configure a phase sweep for the signal generator. Args: stop_delta_phase: End phase in DAC counts. delta_phase_increment: Increment value in DAC counts. dwell_count: Number of DAC cycles to dwell at each phase step. sweep_type: Sweep direction. siggen_restart() Restart the signal generator after a pause. siggen_set_duty_cycle(duty) Set duty cycle of SigGen in percentage. Parameters: duty ( float ) \u2013 Duty cycle in %. siggen_set_frequency(frequency) Set frequency of SigGen in Hz. Parameters: frequency ( int ) \u2013 Frequency in Hz. siggen_set_range(pk2pk, offset=0.0) Set mV range of SigGen (6000A). Parameters: pk2pk ( int ) \u2013 Peak to peak of signal in volts (V). offset ( int , default: 0.0 ) \u2013 Offset of signal in volts (V). siggen_set_waveform(wave_type, buffer=None) Set waveform type for SigGen (6000A). If arbitrary mode is selected, a buffer of ADC samples is needed. Parameters: wave_type ( WAVEFORM ) \u2013 Waveform type i.e. WAVEFORM.SINE. buffer ( ndarray | None , default: None ) \u2013 np.array buffer to be used in WAVEFORM.ARBITRARY mode. siggen_software_trigger_control(trigger_state) Control software triggering for the signal generator. Args: trigger_state: 1 to enable the software trigger, 0 to disable. siggen_trigger(trigger_type, trigger_source, cycles, auto_trigger_ps=0) Configure signal generator triggering. Args: trigger_type: Trigger type to use. trigger_source: Source for the trigger. cycles: Number of cycles before the trigger occurs. auto_trigger_ps: Time in picoseconds before auto-triggering.","title":"Signal Generator"},{"location":"ref/psospa/siggen/#signal-generator","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description set_siggen Configures and applies the signal generator settings. set_siggen_awg Arbitrary Waveform Generation - Generates a signal from a given buffer. siggen_apply Sets the signal generator running using parameters previously configured. siggen_frequency_limits Query frequency sweep limits for the signal generator. siggen_frequency_sweep Configure frequency sweep parameters. siggen_limits Query signal generator parameter limits. siggen_pause Pause the signal generator. siggen_phase Set the signal generator phase using delta_phase . siggen_phase_sweep Configure a phase sweep for the signal generator. siggen_restart Restart the signal generator after a pause. siggen_set_duty_cycle Set duty cycle of SigGen in percentage. siggen_set_frequency Set frequency of SigGen in Hz. siggen_set_range Set mV range of SigGen (6000A). siggen_set_waveform Set waveform type for SigGen (6000A). If arbitrary mode is selected, siggen_software_trigger_control Control software triggering for the signal generator. siggen_trigger Configure signal generator triggering.","title":"Signal Generator"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.set_siggen","text":"Configures and applies the signal generator settings. Sets up the signal generator with the specified waveform type, frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). wave_type ( WAVEFORM ) \u2013 Waveform type (e.g., WAVEFORM.SINE, WAVEFORM.SQUARE). offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). duty ( int or float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1 Hz. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 1 ms. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values.","title":"set_siggen"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.set_siggen_awg","text":"Arbitrary Waveform Generation - Generates a signal from a given buffer. Sets up the signal generator with a specified frequency, amplitude (peak-to-peak), offset, and duty cycle. If sweep is enabled and the sweep-related args are given, the SigGen will sweep. Parameters: frequency ( float ) \u2013 Signal frequency in hertz (Hz). pk2pk ( float ) \u2013 Peak-to-peak voltage in volts (V). buffer ( ndarray | list ) \u2013 description offset ( float , default: 0.0 ) \u2013 Voltage offset in volts (V). Defaults to 0.0. duty ( float , default: 50 ) \u2013 Duty cycle as a percentage (0\u2013100). Defaults to 50. sweep ( bool , default: False ) \u2013 If True, sweep is enabled, fill in the following: stop_freq ( float , default: None ) \u2013 Frequency to stop sweep at in Hertz (Hz). Defaults to None. inc_freq ( float , default: 1 ) \u2013 Frequency to increment (or step) in hertz (Hz). Defaults to 1. dwell_time ( float , default: 0.001 ) \u2013 Time to wait between frequency steps in seconds (s). Defaults to 0.001. sweep_type ( SWEEP_TYPE , default: UP ) \u2013 Direction of sweep [UP, DOWN, UPDOWN, DOWNUP] . Defaults to UP. Raises: PicoSDKException \u2013 description Returns: dict ( dict ) \u2013 description","title":"set_siggen_awg"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_apply","text":"Sets the signal generator running using parameters previously configured. Parameters: enabled ( int , default: 1 ) \u2013 SigGen Enabled, sweep_enabled ( int , default: 0 ) \u2013 Sweep Enabled, trigger_enabled ( int , default: 0 ) \u2013 SigGen trigger enabled, auto_clock_optimise_enabled ( int , default: 0 ) \u2013 Auto Clock Optimisation, override_auto_clock_prescale ( int , default: 0 ) \u2013 Override Clock Prescale, Returns: dict ( dict ) \u2013 Returns dictionary of the actual achieved values.","title":"siggen_apply"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_frequency_limits","text":"Query frequency sweep limits for the signal generator. Args: wave_type: Waveform type. num_samples: Number of samples in the arbitrary waveform buffer. start_frequency: Starting frequency in Hz. sweep_enabled: Whether a sweep is enabled. manual_dac_clock_frequency: Optional manual DAC clock frequency. manual_prescale_ratio: Optional manual DAC prescale ratio. Returns: dict: Frequency limit information with keys max_stop_frequency , min_frequency_step , max_frequency_step , min_dwell_time and max_dwell_time .","title":"siggen_frequency_limits"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_frequency_sweep","text":"Configure frequency sweep parameters. Args: stop_frequency_hz: End frequency of the sweep in Hz. frequency_increment: Increment value in Hz. dwell_time_s: Time to dwell at each frequency in seconds. sweep_type: Sweep direction.","title":"siggen_frequency_sweep"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_limits","text":"Query signal generator parameter limits. Args: parameter: Signal generator parameter to query. Returns: dict: Dictionary with keys min , max and step .","title":"siggen_limits"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_pause","text":"Pause the signal generator.","title":"siggen_pause"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_phase","text":"Set the signal generator phase using delta_phase . The signal generator uses direct digital synthesis (DDS) with a 32-bit phase accumulator that indicates the present location in the waveform. The top bits of the phase accumulator are used as an index into a buffer containing the arbitrary waveform. The remaining bits act as the fractional part of the index, enabling highresolution control of output frequency and allowing the generation of lower frequencies. The signal generator steps through the waveform by adding a deltaPhase value between 1 and phaseAccumulatorSize-1 to the phase accumulator every dacPeriod (= 1/dacFrequency). Parameters: delta_phase ( int ) \u2013 Phase offset to apply.","title":"siggen_phase"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_phase_sweep","text":"Configure a phase sweep for the signal generator. Args: stop_delta_phase: End phase in DAC counts. delta_phase_increment: Increment value in DAC counts. dwell_count: Number of DAC cycles to dwell at each phase step. sweep_type: Sweep direction.","title":"siggen_phase_sweep"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_restart","text":"Restart the signal generator after a pause.","title":"siggen_restart"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_set_duty_cycle","text":"Set duty cycle of SigGen in percentage. Parameters: duty ( float ) \u2013 Duty cycle in %.","title":"siggen_set_duty_cycle"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_set_frequency","text":"Set frequency of SigGen in Hz. Parameters: frequency ( int ) \u2013 Frequency in Hz.","title":"siggen_set_frequency"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_set_range","text":"Set mV range of SigGen (6000A). Parameters: pk2pk ( int ) \u2013 Peak to peak of signal in volts (V). offset ( int , default: 0.0 ) \u2013 Offset of signal in volts (V).","title":"siggen_set_range"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_set_waveform","text":"Set waveform type for SigGen (6000A). If arbitrary mode is selected, a buffer of ADC samples is needed. Parameters: wave_type ( WAVEFORM ) \u2013 Waveform type i.e. WAVEFORM.SINE. buffer ( ndarray | None , default: None ) \u2013 np.array buffer to be used in WAVEFORM.ARBITRARY mode.","title":"siggen_set_waveform"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_software_trigger_control","text":"Control software triggering for the signal generator. Args: trigger_state: 1 to enable the software trigger, 0 to disable.","title":"siggen_software_trigger_control"},{"location":"ref/psospa/siggen/#pypicosdk.pypicosdk.psospa.siggen_trigger","text":"Configure signal generator triggering. Args: trigger_type: Trigger type to use. trigger_source: Source for the trigger. cycles: Number of cycles before the trigger occurs. auto_trigger_ps: Time in picoseconds before auto-triggering.","title":"siggen_trigger"},{"location":"ref/psospa/trigger/","text":"Trigger Configuration Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_trigger_info Retrieve trigger timing information for one or more segments. get_trigger_time_offset Get the trigger time offset for jitter correction in waveforms. get_values_trigger_time_offset_bulk Retrieve trigger time offsets for a range of segments. set_advanced_trigger Configure an advanced trigger in a single call. set_aux_io_mode Configure the AUX IO connector using ps6000aSetAuxIoMode . set_pulse_width_trigger Configures a pulse width trigger using a specified channel and timing parameters. set_simple_trigger Sets up a simple trigger from a specified channel and threshold in mV. set_trigger_channel_conditions Configure a trigger condition. set_trigger_channel_directions Specify the trigger direction for channel . set_trigger_channel_properties Configure trigger thresholds for channel . All set_trigger_delay Delay the trigger by delay samples. set_trigger_digital_port_properties Configure digital port trigger directions. set_trigger_holdoff_counter_by_samples Set the trigger holdoff period in sample intervals. trigger_within_pre_trigger_samples Control trigger positioning relative to pre-trigger samples. get_trigger_info(first_segment_index=0, segment_count=1) Retrieve trigger timing information for one or more segments. Parameters: first_segment_index ( int , default: 0 ) \u2013 Index of the first memory segment to query. segment_count ( int , default: 1 ) \u2013 Number of consecutive segments starting at first_segment_index . Returns: list [ dict ] \u2013 List of dictionaries for each trigger event Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met. get_trigger_time_offset(time_unit, segment_index=0) Get the trigger time offset for jitter correction in waveforms. The driver interpolates between adjacent samples to estimate when the trigger actually occurred. This means the value returned can have a very fine granularity\u2014down to femtoseconds\u2014even though the effective resolution is usually limited to roughly one-tenth of the sampling interval in real-world use. Parameters: time_unit ( TIME_UNIT ) \u2013 Desired unit for the returned offset. segment_index ( int , default: 0 ) \u2013 The memory segment to query. Default is 0. Returns: int ( int ) \u2013 Trigger time offset converted to time_unit . Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met. get_values_trigger_time_offset_bulk(from_segment_index, to_segment_index) Retrieve trigger time offsets for a range of segments. This method returns the trigger time offset and associated time unit for each requested segment. Parameters: from_segment_index ( int ) \u2013 Index of the first memory segment to query. to_segment_index ( int ) \u2013 Index of the last memory segment. If this value is less than from_segment_index the driver wraps around. Returns: list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 list[tuple[int, PICO_TIME_UNIT]]: [(offset, unit), ...] for each list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 segment beginning with from_segment_index . set_advanced_trigger(channel, state, direction, threshold_mode, threshold_upper_mv, threshold_lower_mv, hysteresis_upper_mv=0.0, hysteresis_lower_mv=0.0, aux_output_enable=0, auto_trigger_ms=0, action=ACTION.CLEAR_ALL | ACTION.ADD) Configure an advanced trigger in a single call. This helper sets up the trigger condition, direction and properties required for non-simple triggers. Parameters: channel ( int ) \u2013 Channel to monitor for the trigger condition. state ( int ) \u2013 Trigger state used with set_trigger_channel_conditions . direction ( int ) \u2013 Trigger direction from :class: PICO_THRESHOLD_DIRECTION . threshold_mode ( int ) \u2013 Threshold mode from :class: PICO_THRESHOLD_MODE . threshold_upper_mv ( float ) \u2013 Upper trigger threshold in millivolts. threshold_lower_mv ( float ) \u2013 Lower trigger threshold in millivolts. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_upper_mv in millivolts. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_lower_mv in millivolts. aux_output_enable ( int , default: 0 ) \u2013 Optional auxiliary output flag. auto_trigger_ms ( int , default: 0 ) \u2013 Auto-trigger timeout in milliseconds. 0 waits indefinitely. action ( int , default: CLEAR_ALL | ADD ) \u2013 Action flag for set_trigger_channel_conditions . set_aux_io_mode(mode) Configure the AUX IO connector using ps6000aSetAuxIoMode . Parameters: mode ( AUXIO_MODE ) \u2013 Requested AUXIO mode from :class: ~pypicosdk.constants.AUXIO_MODE . set_pulse_width_trigger(channel, timebase, samples, direction, pulse_width_type, time_upper=0, time_upper_units=TIME_UNIT.US, time_lower=0, time_lower_units=TIME_UNIT.US, threshold_upper_mv=0.0, threshold_lower_mv=0.0, hysteresis_upper_mv=0.0, hysteresis_lower_mv=0.0, trig_dir=None, threshold_mode=THRESHOLD_MODE.LEVEL, auto_trigger_us=0) Configures a pulse width trigger using a specified channel and timing parameters. This method sets up a trigger condition where a pulse on the specified channel must be within or outside a defined pulse width window. The trigger logic uses both level thresholds and pulse width qualifiers to define the trigger behavior. Parameters: channel ( CHANNEL ) \u2013 The input channel on which to apply the pulse width trigger. timebase ( int ) \u2013 The timebase index to determine sampling interval. samples ( int ) \u2013 The number of samples to be captured (used to resolve timing). direction ( THRESHOLD_DIRECTION ) \u2013 Pulse polarity to trigger on (e.g. RISING or FALLING). pulse_width_type ( PULSE_WIDTH_TYPE ) \u2013 Type of pulse width qualifier (e.g. GREATER_THAN). time_upper ( float , default: 0 ) \u2013 Upper time bound for pulse width. Default is 0 (disabled). time_upper_units ( TIME_UNIT , default: US ) \u2013 Units for time_upper . Default is microseconds. time_lower ( float , default: 0 ) \u2013 Lower time bound for pulse width. Default is 0 (disabled). time_lower_units ( TIME_UNIT , default: US ) \u2013 Units for time_lower . Default is microseconds. threshold_upper_mv ( float , default: 0.0 ) \u2013 Upper voltage threshold in millivolts. Default is 0.0 mV. threshold_lower_mv ( float , default: 0.0 ) \u2013 Lower voltage threshold in millivolts. Default is 0.0 mV. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Hysteresis for upper threshold in mV. Default is 0.0 mV. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Hysteresis for lower threshold in mV. Default is 0.0 mV. trig_dir ( THRESHOLD_DIRECTION , default: None ) \u2013 Trigger direction for the initial pulse. If None, inferred as opposite of direction . Default is None. threshold_mode ( THRESHOLD_MODE , default: LEVEL ) \u2013 Specifies whether thresholds are in level or window mode. Default is LEVEL. auto_trigger_us ( int , default: 0 ) \u2013 Time in microseconds after which an automatic trigger occurs. Default is 0 (disabled). set_simple_trigger(channel, threshold=0, threshold_unit='mv', enable=True, direction=TRIGGER_DIR.RISING, delay=0, auto_trigger=0) Sets up a simple trigger from a specified channel and threshold in mV. Parameters: channel ( CHANNEL | str ) \u2013 The input channel to apply the trigger to. threshold ( int , default: 0 ) \u2013 Trigger threshold level. threshold_unit ( str , default: 'mv' ) \u2013 Trigger threshold unit. Default is 'mv'. enable ( bool , default: True ) \u2013 Enables or disables the trigger. direction ( TRIGGER_DIR | str , default: RISING ) \u2013 Trigger direction (e.g., TRIGGER_DIR.RISING ). delay ( int , default: 0 ) \u2013 Delay in samples after the trigger condition is met before starting capture. auto_trigger ( int , default: 0 ) \u2013 Timeout in microseconds after which data capture proceeds even if no trigger occurs. If 0, the PicoScope will wait indefintely. Examples: When using TRIGGER_AUX, threshold is fixed to 1.25 V >>> scope.set_simple_trigger(channel=psdk.CHANNEL.TRIGGER_AUX) set_trigger_channel_conditions(conditions, action=ACTION.CLEAR_ALL | ACTION.ADD) Configure a trigger condition. Parameters: conditions ( list [ tuple [ CHANNEL , TRIGGER_STATE ]] ) \u2013 A list of tuples describing the CHANNEL and TRIGGER_STATE for that channel action ( int , default: CLEAR_ALL | ADD ) \u2013 Action to apply this condition relateive to any previous condition. Defaults to ACTION.CLEAR_ALL | ACTION.ADD. set_trigger_channel_directions(channel, direction, threshold_mode) Specify the trigger direction for channel . If multiple directions are needed, channel, direction and threshold_mode can be given a list of values. Parameters: channel ( CHANNEL | list ) \u2013 Single or list of channels to configure. direction ( THRESHOLD_DIRECTION | list ) \u2013 Single or list of directions to configure. threshold_mode ( THRESHOLD_MODE | list ) \u2013 Single or list of threshold modes to configure. set_trigger_channel_properties(threshold_upper, hysteresis_upper, threshold_lower, hysteresis_lower, channel, aux_output_enable=0, auto_trigger_us=0) Configure trigger thresholds for channel . All threshold and hysteresis values are specified in ADC counts. Parameters: threshold_upper ( int ) \u2013 Upper trigger level. hysteresis_upper ( int ) \u2013 Hysteresis for threshold_upper . threshold_lower ( int ) \u2013 Lower trigger level. hysteresis_lower ( int ) \u2013 Hysteresis for threshold_lower . channel ( int ) \u2013 Target channel as a :class: CHANNEL value. aux_output_enable ( int , default: 0 ) \u2013 Auxiliary output flag. auto_trigger_us ( int , default: 0 ) \u2013 Auto-trigger timeout in microseconds. 0 waits indefinitely. set_trigger_delay(delay) Delay the trigger by delay samples. Args: delay: Number of samples to delay the trigger by. set_trigger_digital_port_properties(port, directions) Configure digital port trigger directions. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration. set_trigger_holdoff_counter_by_samples(samples) Set the trigger holdoff period in sample intervals. Args: samples: Number of samples for the holdoff period. trigger_within_pre_trigger_samples(state) Control trigger positioning relative to pre-trigger samples. Args: state: 0 to enable, 1 to disable","title":"Trigger Configuration"},{"location":"ref/psospa/trigger/#trigger-configuration","text":"Bases: PicoScopeBase , shared_ps6000a_psospa PicoScope OSP (A) API specific functions Methods: Name Description get_trigger_info Retrieve trigger timing information for one or more segments. get_trigger_time_offset Get the trigger time offset for jitter correction in waveforms. get_values_trigger_time_offset_bulk Retrieve trigger time offsets for a range of segments. set_advanced_trigger Configure an advanced trigger in a single call. set_aux_io_mode Configure the AUX IO connector using ps6000aSetAuxIoMode . set_pulse_width_trigger Configures a pulse width trigger using a specified channel and timing parameters. set_simple_trigger Sets up a simple trigger from a specified channel and threshold in mV. set_trigger_channel_conditions Configure a trigger condition. set_trigger_channel_directions Specify the trigger direction for channel . set_trigger_channel_properties Configure trigger thresholds for channel . All set_trigger_delay Delay the trigger by delay samples. set_trigger_digital_port_properties Configure digital port trigger directions. set_trigger_holdoff_counter_by_samples Set the trigger holdoff period in sample intervals. trigger_within_pre_trigger_samples Control trigger positioning relative to pre-trigger samples.","title":"Trigger Configuration"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.get_trigger_info","text":"Retrieve trigger timing information for one or more segments. Parameters: first_segment_index ( int , default: 0 ) \u2013 Index of the first memory segment to query. segment_count ( int , default: 1 ) \u2013 Number of consecutive segments starting at first_segment_index . Returns: list [ dict ] \u2013 List of dictionaries for each trigger event Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met.","title":"get_trigger_info"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.get_trigger_time_offset","text":"Get the trigger time offset for jitter correction in waveforms. The driver interpolates between adjacent samples to estimate when the trigger actually occurred. This means the value returned can have a very fine granularity\u2014down to femtoseconds\u2014even though the effective resolution is usually limited to roughly one-tenth of the sampling interval in real-world use. Parameters: time_unit ( TIME_UNIT ) \u2013 Desired unit for the returned offset. segment_index ( int , default: 0 ) \u2013 The memory segment to query. Default is 0. Returns: int ( int ) \u2013 Trigger time offset converted to time_unit . Raises: PicoSDKException \u2013 If the function call fails or preconditions are not met.","title":"get_trigger_time_offset"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.get_values_trigger_time_offset_bulk","text":"Retrieve trigger time offsets for a range of segments. This method returns the trigger time offset and associated time unit for each requested segment. Parameters: from_segment_index ( int ) \u2013 Index of the first memory segment to query. to_segment_index ( int ) \u2013 Index of the last memory segment. If this value is less than from_segment_index the driver wraps around. Returns: list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 list[tuple[int, PICO_TIME_UNIT]]: [(offset, unit), ...] for each list [ tuple [ int , _PICO_TIME_UNIT ]] \u2013 segment beginning with from_segment_index .","title":"get_values_trigger_time_offset_bulk"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_advanced_trigger","text":"Configure an advanced trigger in a single call. This helper sets up the trigger condition, direction and properties required for non-simple triggers. Parameters: channel ( int ) \u2013 Channel to monitor for the trigger condition. state ( int ) \u2013 Trigger state used with set_trigger_channel_conditions . direction ( int ) \u2013 Trigger direction from :class: PICO_THRESHOLD_DIRECTION . threshold_mode ( int ) \u2013 Threshold mode from :class: PICO_THRESHOLD_MODE . threshold_upper_mv ( float ) \u2013 Upper trigger threshold in millivolts. threshold_lower_mv ( float ) \u2013 Lower trigger threshold in millivolts. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_upper_mv in millivolts. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Optional hysteresis for threshold_lower_mv in millivolts. aux_output_enable ( int , default: 0 ) \u2013 Optional auxiliary output flag. auto_trigger_ms ( int , default: 0 ) \u2013 Auto-trigger timeout in milliseconds. 0 waits indefinitely. action ( int , default: CLEAR_ALL | ADD ) \u2013 Action flag for set_trigger_channel_conditions .","title":"set_advanced_trigger"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_aux_io_mode","text":"Configure the AUX IO connector using ps6000aSetAuxIoMode . Parameters: mode ( AUXIO_MODE ) \u2013 Requested AUXIO mode from :class: ~pypicosdk.constants.AUXIO_MODE .","title":"set_aux_io_mode"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_pulse_width_trigger","text":"Configures a pulse width trigger using a specified channel and timing parameters. This method sets up a trigger condition where a pulse on the specified channel must be within or outside a defined pulse width window. The trigger logic uses both level thresholds and pulse width qualifiers to define the trigger behavior. Parameters: channel ( CHANNEL ) \u2013 The input channel on which to apply the pulse width trigger. timebase ( int ) \u2013 The timebase index to determine sampling interval. samples ( int ) \u2013 The number of samples to be captured (used to resolve timing). direction ( THRESHOLD_DIRECTION ) \u2013 Pulse polarity to trigger on (e.g. RISING or FALLING). pulse_width_type ( PULSE_WIDTH_TYPE ) \u2013 Type of pulse width qualifier (e.g. GREATER_THAN). time_upper ( float , default: 0 ) \u2013 Upper time bound for pulse width. Default is 0 (disabled). time_upper_units ( TIME_UNIT , default: US ) \u2013 Units for time_upper . Default is microseconds. time_lower ( float , default: 0 ) \u2013 Lower time bound for pulse width. Default is 0 (disabled). time_lower_units ( TIME_UNIT , default: US ) \u2013 Units for time_lower . Default is microseconds. threshold_upper_mv ( float , default: 0.0 ) \u2013 Upper voltage threshold in millivolts. Default is 0.0 mV. threshold_lower_mv ( float , default: 0.0 ) \u2013 Lower voltage threshold in millivolts. Default is 0.0 mV. hysteresis_upper_mv ( float , default: 0.0 ) \u2013 Hysteresis for upper threshold in mV. Default is 0.0 mV. hysteresis_lower_mv ( float , default: 0.0 ) \u2013 Hysteresis for lower threshold in mV. Default is 0.0 mV. trig_dir ( THRESHOLD_DIRECTION , default: None ) \u2013 Trigger direction for the initial pulse. If None, inferred as opposite of direction . Default is None. threshold_mode ( THRESHOLD_MODE , default: LEVEL ) \u2013 Specifies whether thresholds are in level or window mode. Default is LEVEL. auto_trigger_us ( int , default: 0 ) \u2013 Time in microseconds after which an automatic trigger occurs. Default is 0 (disabled).","title":"set_pulse_width_trigger"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_simple_trigger","text":"Sets up a simple trigger from a specified channel and threshold in mV. Parameters: channel ( CHANNEL | str ) \u2013 The input channel to apply the trigger to. threshold ( int , default: 0 ) \u2013 Trigger threshold level. threshold_unit ( str , default: 'mv' ) \u2013 Trigger threshold unit. Default is 'mv'. enable ( bool , default: True ) \u2013 Enables or disables the trigger. direction ( TRIGGER_DIR | str , default: RISING ) \u2013 Trigger direction (e.g., TRIGGER_DIR.RISING ). delay ( int , default: 0 ) \u2013 Delay in samples after the trigger condition is met before starting capture. auto_trigger ( int , default: 0 ) \u2013 Timeout in microseconds after which data capture proceeds even if no trigger occurs. If 0, the PicoScope will wait indefintely. Examples: When using TRIGGER_AUX, threshold is fixed to 1.25 V >>> scope.set_simple_trigger(channel=psdk.CHANNEL.TRIGGER_AUX)","title":"set_simple_trigger"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_trigger_channel_conditions","text":"Configure a trigger condition. Parameters: conditions ( list [ tuple [ CHANNEL , TRIGGER_STATE ]] ) \u2013 A list of tuples describing the CHANNEL and TRIGGER_STATE for that channel action ( int , default: CLEAR_ALL | ADD ) \u2013 Action to apply this condition relateive to any previous condition. Defaults to ACTION.CLEAR_ALL | ACTION.ADD.","title":"set_trigger_channel_conditions"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_trigger_channel_directions","text":"Specify the trigger direction for channel . If multiple directions are needed, channel, direction and threshold_mode can be given a list of values. Parameters: channel ( CHANNEL | list ) \u2013 Single or list of channels to configure. direction ( THRESHOLD_DIRECTION | list ) \u2013 Single or list of directions to configure. threshold_mode ( THRESHOLD_MODE | list ) \u2013 Single or list of threshold modes to configure.","title":"set_trigger_channel_directions"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_trigger_channel_properties","text":"Configure trigger thresholds for channel . All threshold and hysteresis values are specified in ADC counts. Parameters: threshold_upper ( int ) \u2013 Upper trigger level. hysteresis_upper ( int ) \u2013 Hysteresis for threshold_upper . threshold_lower ( int ) \u2013 Lower trigger level. hysteresis_lower ( int ) \u2013 Hysteresis for threshold_lower . channel ( int ) \u2013 Target channel as a :class: CHANNEL value. aux_output_enable ( int , default: 0 ) \u2013 Auxiliary output flag. auto_trigger_us ( int , default: 0 ) \u2013 Auto-trigger timeout in microseconds. 0 waits indefinitely.","title":"set_trigger_channel_properties"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_trigger_delay","text":"Delay the trigger by delay samples. Args: delay: Number of samples to delay the trigger by.","title":"set_trigger_delay"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_trigger_digital_port_properties","text":"Configure digital port trigger directions. Args: port: Digital port identifier. directions: Optional list of channel directions to set. None to clear existing configuration.","title":"set_trigger_digital_port_properties"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.set_trigger_holdoff_counter_by_samples","text":"Set the trigger holdoff period in sample intervals. Args: samples: Number of samples for the holdoff period.","title":"set_trigger_holdoff_counter_by_samples"},{"location":"ref/psospa/trigger/#pypicosdk.pypicosdk.psospa.trigger_within_pre_trigger_samples","text":"Control trigger positioning relative to pre-trigger samples. Args: state: 0 to enable, 1 to disable","title":"trigger_within_pre_trigger_samples"}]}